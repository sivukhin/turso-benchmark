{"version":3,"file":"src_components_shared_AssemblyView-codemirror_tsx.1270442c5841ab9dbafa.bundle.js","mappings":"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","sources":["webpack:///./src/components/shared/AssemblyView-codemirror.tsx","webpack:///./src/utils/codemirror-shared.ts"],"sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n/**\n * This module wraps all the interaction with the CodeMirror API into a\n * AssemblyViewEditor class.\n *\n * This module is intended to be imported asynchronously, so that all the\n * CodeMirror code can be split into a separate bundle chunk.\n *\n * This file implements the following features:\n *  - Display assembly code.\n *  - Display a gutter with:\n *    - \"Total\" timings for each instruction\n *    - \"Self\" timings for each instruction\n *    - The address for each instruction\n *  - Highlight assembly code lines which have a non-zero timing, by applying\n *    a cm-nonZeroLine class to them. This highlight line goes across the entire\n *    width of the editor, it covers both the gutter and the main area.\n */\nimport { EditorView, gutter } from '@codemirror/view';\nimport { EditorState, StateField, StateEffect } from '@codemirror/state';\nimport { syntaxHighlighting } from '@codemirror/language';\nimport { classHighlighter } from '@lezer/highlight';\nimport clamp from 'clamp';\n\nimport type {\n  AddressTimings,\n  Address,\n  LineTimings,\n  LineNumber,\n  DecodedInstruction,\n} from 'firefox-profiler/types';\n\nimport { bisectionRight } from 'firefox-profiler/utils/bisect';\nimport {\n  timingsExtension,\n  updateTimingsEffect,\n  StringMarker,\n} from 'firefox-profiler/utils/codemirror-shared';\n\n// An \"effect\" is like a redux action. This effect is used to replace the value\n// of the state field addressToLineMapField.\nconst updateAddressToLineMapEffect = StateEffect.define<AddressToLineMap>();\n\n// This \"state field\" stores the current AddressToLineMap. This field allows the\n// instructionAddressGutter to map line numbers to addresses.\nconst addressToLineMapField = StateField.define<AddressToLineMap>({\n  create() {\n    return new AddressToLineMap([]);\n  },\n  update(instructionAddresses, transaction) {\n    // Get the new value from an effect in the transaction.\n    let newSortedAddresses = instructionAddresses;\n    for (const effect of transaction.effects) {\n      if (effect.is(updateAddressToLineMapEffect)) {\n        newSortedAddresses = effect.value;\n      }\n    }\n    return newSortedAddresses;\n  },\n});\n\n// A gutter which displays the address of each instruction.\nconst instructionAddressGutter = gutter({\n  class: 'cm-instruction-address-gutter',\n\n  // Returns a gutter marker for this line, or null.\n  lineMarker(view, line) {\n    const lineNumber = view.state.doc.lineAt(line.from).number;\n    const map = view.state.field(addressToLineMapField);\n    const address = map.lineToAddress(lineNumber);\n    return address !== null\n      ? new StringMarker(`0x${address.toString(16)}`)\n      : null;\n  },\n\n  // Returns true if the update affects the instruction addresses in the gutter.\n  lineMarkerChange(update) {\n    return update.transactions.some((t) =>\n      t.effects.some((e) => e.is(updateAddressToLineMapEffect))\n    );\n  },\n});\n\nfunction instructionsToText(assemblyCode: DecodedInstruction[]): string {\n  return assemblyCode.map((instr) => instr.decodedString).join('\\n');\n}\n\n/**\n * This map is used to convert between instruction addresses and editor line\n * numbers.\n */\nclass AddressToLineMap {\n  // The address of each instruction. This stays constant for the entire lifetime\n  // of this AddressToLineMap instance.\n  //\n  // _instructionAddresses[0] contains the address of the instruction which is\n  // displayed in line 1. (Line numbers are 1-based.)\n  //\n  // The addresses need to be ordered from low to high, so that the binary search\n  // works.\n  _instructionAddresses: Address[];\n\n  constructor(instructionAddresses: Address[]) {\n    this._instructionAddresses = instructionAddresses;\n  }\n\n  // Find the line which displays the instruction which covers `address`.\n  // `address` doesn't need to be a perfect match for the instruction address;\n  // for example, in the example below, address 0x10e4 is mapped to line 3:\n  //\n  // 1: 0x10da: mov r14, rdi\n  // 2: 0x10dd: mov rdi, rsi\n  // 3: 0x10e0: call _malloc_usable_size\n  // 4: 0x10e5: test rax, rax\n  // 5: 0x10e8: je loc_10f6\n  addressToLine(address: Address): LineNumber | null {\n    const insertionIndex = bisectionRight(this._instructionAddresses, address);\n    if (insertionIndex === 0) {\n      // address < instructionAddresses[0]\n      return null;\n    }\n\n    const elementIndex = insertionIndex - 1;\n    const lineNumber = elementIndex + 1;\n    return lineNumber;\n  }\n\n  // Return the address of the instruction which is displayed in line `lineNumber`.\n  lineToAddress(lineNumber: LineNumber): Address | null {\n    if (lineNumber < 1 || lineNumber > this._instructionAddresses.length) {\n      return null;\n    }\n\n    const elementIndex = lineNumber - 1;\n    return this._instructionAddresses[elementIndex];\n  }\n}\n\nfunction getInstructionAddresses(\n  assemblyCode: DecodedInstruction[]\n): Address[] {\n  return assemblyCode.map((instr) => instr.address);\n}\n\n// Convert AddressTimings to LineTimings with the help of an AddressToLineMap.\nfunction addressTimingsToLineTimings(\n  addressTimings: AddressTimings,\n  map: AddressToLineMap\n): LineTimings {\n  const totalLineHits = new Map();\n  for (const [address, hitCount] of addressTimings.totalAddressHits) {\n    const line = map.addressToLine(address);\n    if (line !== null) {\n      const currentHitCount = totalLineHits.get(line) ?? 0;\n      totalLineHits.set(line, currentHitCount + hitCount);\n    }\n  }\n\n  const selfLineHits = new Map();\n  for (const [address, hitCount] of addressTimings.selfAddressHits) {\n    const line = map.addressToLine(address);\n    if (line !== null) {\n      const currentHitCount = selfLineHits.get(line) ?? 0;\n      selfLineHits.set(line, currentHitCount + hitCount);\n    }\n  }\n\n  return { totalLineHits, selfLineHits };\n}\n\nexport class AssemblyViewEditor {\n  _view: EditorView;\n  _addressToLineMap: AddressToLineMap;\n  _addressTimings: AddressTimings;\n\n  // Create a CodeMirror editor and add it as a child element of domParent.\n  constructor(\n    initialAssemblyCode: DecodedInstruction[],\n    addressTimings: AddressTimings,\n    domParent: Element\n  ) {\n    this._addressToLineMap = new AddressToLineMap(\n      getInstructionAddresses(initialAssemblyCode)\n    );\n    this._addressTimings = addressTimings;\n    let state = EditorState.create({\n      doc: instructionsToText(initialAssemblyCode),\n      extensions: [\n        timingsExtension,\n        addressToLineMapField,\n        instructionAddressGutter,\n        syntaxHighlighting(classHighlighter),\n        EditorState.readOnly.of(true),\n        EditorView.editable.of(false),\n      ],\n    });\n    const lineTimings = addressTimingsToLineTimings(\n      this._addressTimings,\n      this._addressToLineMap\n    );\n    state = state.update({\n      effects: [\n        updateAddressToLineMapEffect.of(this._addressToLineMap),\n        updateTimingsEffect.of(lineTimings),\n      ],\n    }).state;\n    this._view = new EditorView({\n      state,\n      parent: domParent,\n    });\n  }\n\n  setContents(assemblyCode: DecodedInstruction[]) {\n    this._addressToLineMap = new AddressToLineMap(\n      getInstructionAddresses(assemblyCode)\n    );\n    const lineTimings = addressTimingsToLineTimings(\n      this._addressTimings,\n      this._addressToLineMap\n    );\n    // The CodeMirror way of replacing the entire contents is to insert new text\n    // and overwrite the full range of existing text.\n    const text = instructionsToText(assemblyCode);\n    this._view.dispatch(\n      this._view.state.update({\n        changes: {\n          insert: text,\n          from: 0,\n          to: this._view.state.doc.length,\n        },\n      })\n    );\n    this._view.dispatch({\n      effects: [\n        updateAddressToLineMapEffect.of(this._addressToLineMap),\n        updateTimingsEffect.of(lineTimings),\n      ],\n    });\n  }\n\n  setTimings(addressTimings: AddressTimings) {\n    // Update the value of the timings field by dispatching an updateTimingsEffect.\n    this._addressTimings = addressTimings;\n    const lineTimings = addressTimingsToLineTimings(\n      this._addressTimings,\n      this._addressToLineMap\n    );\n    this._view.dispatch({\n      effects: updateTimingsEffect.of(lineTimings),\n    });\n  }\n\n  scrollToLine(lineNumber: number) {\n    // Clamp the line number to the document's line count.\n    lineNumber = clamp(lineNumber, 1, this._view.state.doc.lines);\n\n    // Convert the line number into a position.\n    const pos = this._view.state.doc.line(lineNumber).from;\n    // Dispatch the scroll action.\n    this._view.dispatch({\n      effects: EditorView.scrollIntoView(pos, { y: 'start', yMargin: 0 }),\n    });\n    // Trigger a measure flush, to work around\n    // https://github.com/codemirror/codemirror.next/issues/676\n    this._view.coordsAtPos(0);\n  }\n\n  scrollToAddress(address: Address) {\n    const lineNumber = this._addressToLineMap.addressToLine(address);\n    if (lineNumber !== null) {\n      this.scrollToLine(lineNumber);\n    }\n  }\n\n  scrollToAddressWithSpaceOnTop(address: Address, topSpaceLines: number) {\n    const lineNumber = this._addressToLineMap.addressToLine(address);\n    if (lineNumber !== null) {\n      this.scrollToLine(lineNumber - topSpaceLines);\n    }\n  }\n}\n","/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport {\n  EditorView,\n  Decoration,\n  GutterMarker,\n  gutter,\n  gutterLineClass,\n} from '@codemirror/view';\nimport type { EditorState } from '@codemirror/state';\nimport { StateField, StateEffect, RangeSet } from '@codemirror/state';\n\nimport type { LineTimings } from 'firefox-profiler/types';\n\nimport { emptyLineTimings } from 'firefox-profiler/profile-logic/line-timings';\n\n// This gutter marker applies the \"cm-nonZeroLine\" class to gutter elements.\nconst nonZeroLineGutterMarker = new (class extends GutterMarker {\n  override elementClass = 'cm-nonZeroLine';\n})();\n\n// This \"decoration\" applies the \"cm-nonZeroLine\" class to the line of assembly\n// code in the main editor contents (not the gutter).\nconst nonZeroLineDecoration = Decoration.line({ class: 'cm-nonZeroLine' });\n\n// An \"effect\" is like a redux action. This effect is used to replace the value\n// of the timingsField state field.\nexport const updateTimingsEffect = StateEffect.define<LineTimings>();\n\n// A \"state field\" for the timings.\nconst timingsField = StateField.define<LineTimings>({\n  create() {\n    return emptyLineTimings;\n  },\n  update(timings, transaction) {\n    // This is like a reducer. Find an updateTimingsEffect in the transaction\n    // and set this field to the timings in it.\n    let newTimings = timings;\n    for (const effect of transaction.effects) {\n      if (effect.is(updateTimingsEffect)) {\n        newTimings = effect.value;\n      }\n    }\n    return newTimings;\n  },\n});\n\n// Finds all lines with non-zero line timings, for the highlight line.\n// The line numbers are then converted into \"positions\", i.e. character offsets\n// in the document, for the start of the line.\n// Then they are sorted, because our caller wants to have a sorted list.\nfunction getSortedStartPositionsOfNonZeroLines(state: EditorState): number[] {\n  const timings = state.field(timingsField);\n  const nonZeroLines = new Set<number>();\n  for (const lineNumber of timings.totalLineHits.keys()) {\n    nonZeroLines.add(lineNumber);\n  }\n  for (const lineNumber of timings.selfLineHits.keys()) {\n    nonZeroLines.add(lineNumber);\n  }\n  const lineCount = state.doc.lines;\n  const positions = Array.from(nonZeroLines)\n    .filter((l) => l >= 1 && l <= lineCount)\n    .map((lineNumber) => state.doc.line(lineNumber).from);\n  positions.sort((a, b) => a - b);\n  return positions;\n}\n\n// This is an \"extension\" which applies the \"cm-nonZeroLine\" class to all gutter\n// elements for lines with non-zero timings. It is like a piece of derived state;\n// it needs to be recomputed whenever one of the input states change. The input\n// states are the editor contents (\"doc\") and the value of the timings field.\n// The editor contents are relevant because the output is expressed in terms of\n// positions, i.e. character offsets from the document start, and those positions\n// need to be updated if the amount of text in a line changes. This happens when\n// we replace the file placeholder content with the actual file content.\nconst nonZeroLineGutterHighlighter = gutterLineClass.compute(\n  ['doc', timingsField],\n  (state) => {\n    const positions = getSortedStartPositionsOfNonZeroLines(state);\n    return RangeSet.of(positions.map((p) => nonZeroLineGutterMarker.range(p)));\n  }\n);\n\n// Same as the previous extension, but this one is for the main editor. There\n// doesn't seem to be a way to set a class for the entire line, i.e. both the\n// gutter elements and the main editor elements of that line.\nconst nonZeroLineDecorationHighlighter = EditorView.decorations.compute(\n  ['doc', timingsField],\n  (state) => {\n    const positions = getSortedStartPositionsOfNonZeroLines(state);\n    return RangeSet.of(positions.map((p) => nonZeroLineDecoration.range(p)));\n  }\n);\n\n// This is a \"gutter marker\" which renders just a string and nothing else.\n// It is used for the AddressTimings annotations, i.e. for the numbers in the\n// gutter.\nexport class StringMarker extends GutterMarker {\n  _s: string;\n\n  constructor(s: string) {\n    super();\n    this._s = s;\n  }\n\n  override toDOM() {\n    return document.createTextNode(this._s);\n  }\n}\n\n// The \"extension\" which manages the elements in the gutter for the \"total\"\n// column.\nconst totalTimingsGutter = gutter({\n  class: 'cm-total-timings-gutter',\n  lineMarker(view, line) {\n    // Return a gutter marker for this line, or null.\n    const lineNumber = view.state.doc.lineAt(line.from).number;\n    const timings = view.state.field(timingsField);\n    const totalTime = timings.totalLineHits.get(lineNumber);\n    return totalTime !== undefined ? new StringMarker(String(totalTime)) : null;\n  },\n  lineMarkerChange(update) {\n    // Return true if the update affects the total timings in the gutter.\n    return update.transactions.some((t) =>\n      t.effects.some((e) => e.is(updateTimingsEffect))\n    );\n  },\n});\n\n// The \"extension\" which manages the elements in the gutter for the \"self\"\n// column.\nconst selfTimingsGutter = gutter({\n  class: 'cm-self-timings-gutter',\n  lineMarker(view, line) {\n    // Return a gutter marker for this line, or null.\n    const lineNumber = view.state.doc.lineAt(line.from).number;\n    const timings = view.state.field(timingsField);\n    const selfTime = timings.selfLineHits.get(lineNumber);\n    return selfTime !== undefined ? new StringMarker(String(selfTime)) : null;\n  },\n  lineMarkerChange(update) {\n    // Return true if the update affects the self timings in the gutter.\n    return update.transactions.some((t) =>\n      t.effects.some((e) => e.is(updateTimingsEffect))\n    );\n  },\n});\n\n// All extensions which have to do with timings, grouped into one extension.\nexport const timingsExtension = [\n  timingsField,\n  totalTimingsGutter,\n  selfTimingsGutter,\n  nonZeroLineGutterHighlighter,\n  nonZeroLineDecorationHighlighter,\n];\n"],"names":["EditorView","gutter","EditorState","StateField","StateEffect","syntaxHighlighting","classHighlighter","clamp","bisectionRight","timingsExtension","updateTimingsEffect","StringMarker","updateAddressToLineMapEffect","define","addressToLineMapField","create","AddressToLineMap","update","instructionAddresses","transaction","newSortedAddresses","effect","effects","is","value","instructionAddressGutter","class","lineMarker","view","line","lineNumber","state","doc","lineAt","from","number","map","field","address","lineToAddress","toString","lineMarkerChange","transactions","some","t","e","instructionsToText","assemblyCode","instr","decodedString","join","constructor","_instructionAddresses","addressToLine","insertionIndex","elementIndex","length","getInstructionAddresses","addressTimingsToLineTimings","addressTimings","totalLineHits","Map","hitCount","totalAddressHits","currentHitCount","get","set","selfLineHits","selfAddressHits","AssemblyViewEditor","initialAssemblyCode","domParent","_view","_addressToLineMap","_addressTimings","extensions","readOnly","of","editable","lineTimings","parent","setContents","text","dispatch","changes","insert","to","setTimings","scrollToLine","lines","pos","scrollIntoView","y","yMargin","coordsAtPos","scrollToAddress","scrollToAddressWithSpaceOnTop","topSpaceLines","Decoration","GutterMarker","gutterLineClass","RangeSet","emptyLineTimings","nonZeroLineGutterMarker","args","elementClass","nonZeroLineDecoration","timingsField","timings","newTimings","getSortedStartPositionsOfNonZeroLines","nonZeroLines","Set","keys","add","lineCount","positions","Array","filter","l","sort","a","b","nonZeroLineGutterHighlighter","compute","p","range","nonZeroLineDecorationHighlighter","decorations","s","_s","toDOM","document","createTextNode","totalTimingsGutter","totalTime","undefined","String","selfTimingsGutter","selfTime"],"sourceRoot":""}