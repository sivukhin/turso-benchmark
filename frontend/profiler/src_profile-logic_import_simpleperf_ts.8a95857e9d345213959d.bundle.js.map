{"version":3,"file":"src_profile-logic_import_simpleperf_ts.8a95857e9d345213959d.bundle.js","mappings":"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","sources":["webpack:///./src/profile-logic/import/proto/simpleperf_report.js","webpack:///./src/profile-logic/import/simpleperf.ts"],"sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.simpleperf_report_proto = (function() {\n\n    /**\n     * Namespace simpleperf_report_proto.\n     * @exports simpleperf_report_proto\n     * @namespace\n     */\n    var simpleperf_report_proto = {};\n\n    simpleperf_report_proto.Sample = (function() {\n\n        /**\n         * Properties of a Sample.\n         * @memberof simpleperf_report_proto\n         * @interface ISample\n         * @property {number|Long|null} [time] Sample time\n         * @property {number|null} [threadId] Sample threadId\n         * @property {Array.<simpleperf_report_proto.Sample.ICallChainEntry>|null} [callchain] Sample callchain\n         * @property {number|Long|null} [eventCount] Sample eventCount\n         * @property {number|null} [eventTypeId] Sample eventTypeId\n         * @property {simpleperf_report_proto.Sample.IUnwindingResult|null} [unwindingResult] Sample unwindingResult\n         */\n\n        /**\n         * Constructs a new Sample.\n         * @memberof simpleperf_report_proto\n         * @classdesc Represents a Sample.\n         * @implements ISample\n         * @constructor\n         * @param {simpleperf_report_proto.ISample=} [properties] Properties to set\n         */\n        function Sample(properties) {\n            this.callchain = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Sample time.\n         * @member {number|Long} time\n         * @memberof simpleperf_report_proto.Sample\n         * @instance\n         */\n        Sample.prototype.time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Sample threadId.\n         * @member {number} threadId\n         * @memberof simpleperf_report_proto.Sample\n         * @instance\n         */\n        Sample.prototype.threadId = 0;\n\n        /**\n         * Sample callchain.\n         * @member {Array.<simpleperf_report_proto.Sample.ICallChainEntry>} callchain\n         * @memberof simpleperf_report_proto.Sample\n         * @instance\n         */\n        Sample.prototype.callchain = $util.emptyArray;\n\n        /**\n         * Sample eventCount.\n         * @member {number|Long} eventCount\n         * @memberof simpleperf_report_proto.Sample\n         * @instance\n         */\n        Sample.prototype.eventCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Sample eventTypeId.\n         * @member {number} eventTypeId\n         * @memberof simpleperf_report_proto.Sample\n         * @instance\n         */\n        Sample.prototype.eventTypeId = 0;\n\n        /**\n         * Sample unwindingResult.\n         * @member {simpleperf_report_proto.Sample.IUnwindingResult|null|undefined} unwindingResult\n         * @memberof simpleperf_report_proto.Sample\n         * @instance\n         */\n        Sample.prototype.unwindingResult = null;\n\n        /**\n         * Creates a new Sample instance using the specified properties.\n         * @function create\n         * @memberof simpleperf_report_proto.Sample\n         * @static\n         * @param {simpleperf_report_proto.ISample=} [properties] Properties to set\n         * @returns {simpleperf_report_proto.Sample} Sample instance\n         */\n        Sample.create = function create(properties) {\n            return new Sample(properties);\n        };\n\n        /**\n         * Encodes the specified Sample message. Does not implicitly {@link simpleperf_report_proto.Sample.verify|verify} messages.\n         * @function encode\n         * @memberof simpleperf_report_proto.Sample\n         * @static\n         * @param {simpleperf_report_proto.ISample} message Sample message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Sample.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.time != null && Object.hasOwnProperty.call(message, \"time\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.time);\n            if (message.threadId != null && Object.hasOwnProperty.call(message, \"threadId\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.threadId);\n            if (message.callchain != null && message.callchain.length)\n                for (var i = 0; i < message.callchain.length; ++i)\n                    $root.simpleperf_report_proto.Sample.CallChainEntry.encode(message.callchain[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.eventCount != null && Object.hasOwnProperty.call(message, \"eventCount\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.eventCount);\n            if (message.eventTypeId != null && Object.hasOwnProperty.call(message, \"eventTypeId\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.eventTypeId);\n            if (message.unwindingResult != null && Object.hasOwnProperty.call(message, \"unwindingResult\"))\n                $root.simpleperf_report_proto.Sample.UnwindingResult.encode(message.unwindingResult, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Sample message, length delimited. Does not implicitly {@link simpleperf_report_proto.Sample.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof simpleperf_report_proto.Sample\n         * @static\n         * @param {simpleperf_report_proto.ISample} message Sample message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Sample.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Sample message from the specified reader or buffer.\n         * @function decode\n         * @memberof simpleperf_report_proto.Sample\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {simpleperf_report_proto.Sample} Sample\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Sample.decode = function decode(reader, length, error) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.simpleperf_report_proto.Sample();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                if (tag === error)\n                    break;\n                switch (tag >>> 3) {\n                case 1: {\n                        message.time = reader.uint64();\n                        break;\n                    }\n                case 2: {\n                        message.threadId = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        if (!(message.callchain && message.callchain.length))\n                            message.callchain = [];\n                        message.callchain.push($root.simpleperf_report_proto.Sample.CallChainEntry.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        message.eventCount = reader.uint64();\n                        break;\n                    }\n                case 5: {\n                        message.eventTypeId = reader.uint32();\n                        break;\n                    }\n                case 6: {\n                        message.unwindingResult = $root.simpleperf_report_proto.Sample.UnwindingResult.decode(reader, reader.uint32());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Sample message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof simpleperf_report_proto.Sample\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {simpleperf_report_proto.Sample} Sample\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Sample.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Sample message.\n         * @function verify\n         * @memberof simpleperf_report_proto.Sample\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Sample.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.time != null && message.hasOwnProperty(\"time\"))\n                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))\n                    return \"time: integer|Long expected\";\n            if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n                if (!$util.isInteger(message.threadId))\n                    return \"threadId: integer expected\";\n            if (message.callchain != null && message.hasOwnProperty(\"callchain\")) {\n                if (!Array.isArray(message.callchain))\n                    return \"callchain: array expected\";\n                for (var i = 0; i < message.callchain.length; ++i) {\n                    var error = $root.simpleperf_report_proto.Sample.CallChainEntry.verify(message.callchain[i]);\n                    if (error)\n                        return \"callchain.\" + error;\n                }\n            }\n            if (message.eventCount != null && message.hasOwnProperty(\"eventCount\"))\n                if (!$util.isInteger(message.eventCount) && !(message.eventCount && $util.isInteger(message.eventCount.low) && $util.isInteger(message.eventCount.high)))\n                    return \"eventCount: integer|Long expected\";\n            if (message.eventTypeId != null && message.hasOwnProperty(\"eventTypeId\"))\n                if (!$util.isInteger(message.eventTypeId))\n                    return \"eventTypeId: integer expected\";\n            if (message.unwindingResult != null && message.hasOwnProperty(\"unwindingResult\")) {\n                var error = $root.simpleperf_report_proto.Sample.UnwindingResult.verify(message.unwindingResult);\n                if (error)\n                    return \"unwindingResult.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Sample message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof simpleperf_report_proto.Sample\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {simpleperf_report_proto.Sample} Sample\n         */\n        Sample.fromObject = function fromObject(object) {\n            if (object instanceof $root.simpleperf_report_proto.Sample)\n                return object;\n            var message = new $root.simpleperf_report_proto.Sample();\n            if (object.time != null)\n                if ($util.Long)\n                    (message.time = $util.Long.fromValue(object.time)).unsigned = true;\n                else if (typeof object.time === \"string\")\n                    message.time = parseInt(object.time, 10);\n                else if (typeof object.time === \"number\")\n                    message.time = object.time;\n                else if (typeof object.time === \"object\")\n                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber(true);\n            if (object.threadId != null)\n                message.threadId = object.threadId | 0;\n            if (object.callchain) {\n                if (!Array.isArray(object.callchain))\n                    throw TypeError(\".simpleperf_report_proto.Sample.callchain: array expected\");\n                message.callchain = [];\n                for (var i = 0; i < object.callchain.length; ++i) {\n                    if (typeof object.callchain[i] !== \"object\")\n                        throw TypeError(\".simpleperf_report_proto.Sample.callchain: object expected\");\n                    message.callchain[i] = $root.simpleperf_report_proto.Sample.CallChainEntry.fromObject(object.callchain[i]);\n                }\n            }\n            if (object.eventCount != null)\n                if ($util.Long)\n                    (message.eventCount = $util.Long.fromValue(object.eventCount)).unsigned = true;\n                else if (typeof object.eventCount === \"string\")\n                    message.eventCount = parseInt(object.eventCount, 10);\n                else if (typeof object.eventCount === \"number\")\n                    message.eventCount = object.eventCount;\n                else if (typeof object.eventCount === \"object\")\n                    message.eventCount = new $util.LongBits(object.eventCount.low >>> 0, object.eventCount.high >>> 0).toNumber(true);\n            if (object.eventTypeId != null)\n                message.eventTypeId = object.eventTypeId >>> 0;\n            if (object.unwindingResult != null) {\n                if (typeof object.unwindingResult !== \"object\")\n                    throw TypeError(\".simpleperf_report_proto.Sample.unwindingResult: object expected\");\n                message.unwindingResult = $root.simpleperf_report_proto.Sample.UnwindingResult.fromObject(object.unwindingResult);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Sample message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof simpleperf_report_proto.Sample\n         * @static\n         * @param {simpleperf_report_proto.Sample} message Sample\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Sample.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.callchain = [];\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.time = options.longs === String ? \"0\" : 0;\n                object.threadId = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.eventCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.eventCount = options.longs === String ? \"0\" : 0;\n                object.eventTypeId = 0;\n                object.unwindingResult = null;\n            }\n            if (message.time != null && message.hasOwnProperty(\"time\"))\n                if (typeof message.time === \"number\")\n                    object.time = options.longs === String ? String(message.time) : message.time;\n                else\n                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber(true) : message.time;\n            if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n                object.threadId = message.threadId;\n            if (message.callchain && message.callchain.length) {\n                object.callchain = [];\n                for (var j = 0; j < message.callchain.length; ++j)\n                    object.callchain[j] = $root.simpleperf_report_proto.Sample.CallChainEntry.toObject(message.callchain[j], options);\n            }\n            if (message.eventCount != null && message.hasOwnProperty(\"eventCount\"))\n                if (typeof message.eventCount === \"number\")\n                    object.eventCount = options.longs === String ? String(message.eventCount) : message.eventCount;\n                else\n                    object.eventCount = options.longs === String ? $util.Long.prototype.toString.call(message.eventCount) : options.longs === Number ? new $util.LongBits(message.eventCount.low >>> 0, message.eventCount.high >>> 0).toNumber(true) : message.eventCount;\n            if (message.eventTypeId != null && message.hasOwnProperty(\"eventTypeId\"))\n                object.eventTypeId = message.eventTypeId;\n            if (message.unwindingResult != null && message.hasOwnProperty(\"unwindingResult\"))\n                object.unwindingResult = $root.simpleperf_report_proto.Sample.UnwindingResult.toObject(message.unwindingResult, options);\n            return object;\n        };\n\n        /**\n         * Converts this Sample to JSON.\n         * @function toJSON\n         * @memberof simpleperf_report_proto.Sample\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Sample.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Sample\n         * @function getTypeUrl\n         * @memberof simpleperf_report_proto.Sample\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Sample.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/simpleperf_report_proto.Sample\";\n        };\n\n        Sample.CallChainEntry = (function() {\n\n            /**\n             * Properties of a CallChainEntry.\n             * @memberof simpleperf_report_proto.Sample\n             * @interface ICallChainEntry\n             * @property {number|Long|null} [vaddrInFile] CallChainEntry vaddrInFile\n             * @property {number|null} [fileId] CallChainEntry fileId\n             * @property {number|null} [symbolId] CallChainEntry symbolId\n             * @property {simpleperf_report_proto.Sample.CallChainEntry.ExecutionType|null} [executionType] CallChainEntry executionType\n             */\n\n            /**\n             * Constructs a new CallChainEntry.\n             * @memberof simpleperf_report_proto.Sample\n             * @classdesc Represents a CallChainEntry.\n             * @implements ICallChainEntry\n             * @constructor\n             * @param {simpleperf_report_proto.Sample.ICallChainEntry=} [properties] Properties to set\n             */\n            function CallChainEntry(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * CallChainEntry vaddrInFile.\n             * @member {number|Long} vaddrInFile\n             * @memberof simpleperf_report_proto.Sample.CallChainEntry\n             * @instance\n             */\n            CallChainEntry.prototype.vaddrInFile = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * CallChainEntry fileId.\n             * @member {number} fileId\n             * @memberof simpleperf_report_proto.Sample.CallChainEntry\n             * @instance\n             */\n            CallChainEntry.prototype.fileId = 0;\n\n            /**\n             * CallChainEntry symbolId.\n             * @member {number} symbolId\n             * @memberof simpleperf_report_proto.Sample.CallChainEntry\n             * @instance\n             */\n            CallChainEntry.prototype.symbolId = 0;\n\n            /**\n             * CallChainEntry executionType.\n             * @member {simpleperf_report_proto.Sample.CallChainEntry.ExecutionType} executionType\n             * @memberof simpleperf_report_proto.Sample.CallChainEntry\n             * @instance\n             */\n            CallChainEntry.prototype.executionType = 0;\n\n            /**\n             * Creates a new CallChainEntry instance using the specified properties.\n             * @function create\n             * @memberof simpleperf_report_proto.Sample.CallChainEntry\n             * @static\n             * @param {simpleperf_report_proto.Sample.ICallChainEntry=} [properties] Properties to set\n             * @returns {simpleperf_report_proto.Sample.CallChainEntry} CallChainEntry instance\n             */\n            CallChainEntry.create = function create(properties) {\n                return new CallChainEntry(properties);\n            };\n\n            /**\n             * Encodes the specified CallChainEntry message. Does not implicitly {@link simpleperf_report_proto.Sample.CallChainEntry.verify|verify} messages.\n             * @function encode\n             * @memberof simpleperf_report_proto.Sample.CallChainEntry\n             * @static\n             * @param {simpleperf_report_proto.Sample.ICallChainEntry} message CallChainEntry message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            CallChainEntry.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.vaddrInFile != null && Object.hasOwnProperty.call(message, \"vaddrInFile\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.vaddrInFile);\n                if (message.fileId != null && Object.hasOwnProperty.call(message, \"fileId\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.fileId);\n                if (message.symbolId != null && Object.hasOwnProperty.call(message, \"symbolId\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.symbolId);\n                if (message.executionType != null && Object.hasOwnProperty.call(message, \"executionType\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.executionType);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified CallChainEntry message, length delimited. Does not implicitly {@link simpleperf_report_proto.Sample.CallChainEntry.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof simpleperf_report_proto.Sample.CallChainEntry\n             * @static\n             * @param {simpleperf_report_proto.Sample.ICallChainEntry} message CallChainEntry message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            CallChainEntry.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a CallChainEntry message from the specified reader or buffer.\n             * @function decode\n             * @memberof simpleperf_report_proto.Sample.CallChainEntry\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {simpleperf_report_proto.Sample.CallChainEntry} CallChainEntry\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            CallChainEntry.decode = function decode(reader, length, error) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.simpleperf_report_proto.Sample.CallChainEntry();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    if (tag === error)\n                        break;\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.vaddrInFile = reader.uint64();\n                            break;\n                        }\n                    case 2: {\n                            message.fileId = reader.uint32();\n                            break;\n                        }\n                    case 3: {\n                            message.symbolId = reader.int32();\n                            break;\n                        }\n                    case 4: {\n                            message.executionType = reader.int32();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a CallChainEntry message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof simpleperf_report_proto.Sample.CallChainEntry\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {simpleperf_report_proto.Sample.CallChainEntry} CallChainEntry\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            CallChainEntry.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a CallChainEntry message.\n             * @function verify\n             * @memberof simpleperf_report_proto.Sample.CallChainEntry\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            CallChainEntry.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.vaddrInFile != null && message.hasOwnProperty(\"vaddrInFile\"))\n                    if (!$util.isInteger(message.vaddrInFile) && !(message.vaddrInFile && $util.isInteger(message.vaddrInFile.low) && $util.isInteger(message.vaddrInFile.high)))\n                        return \"vaddrInFile: integer|Long expected\";\n                if (message.fileId != null && message.hasOwnProperty(\"fileId\"))\n                    if (!$util.isInteger(message.fileId))\n                        return \"fileId: integer expected\";\n                if (message.symbolId != null && message.hasOwnProperty(\"symbolId\"))\n                    if (!$util.isInteger(message.symbolId))\n                        return \"symbolId: integer expected\";\n                if (message.executionType != null && message.hasOwnProperty(\"executionType\"))\n                    switch (message.executionType) {\n                    default:\n                        return \"executionType: enum value expected\";\n                    case 0:\n                    case 1:\n                    case 2:\n                    case 3:\n                        break;\n                    }\n                return null;\n            };\n\n            /**\n             * Creates a CallChainEntry message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof simpleperf_report_proto.Sample.CallChainEntry\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {simpleperf_report_proto.Sample.CallChainEntry} CallChainEntry\n             */\n            CallChainEntry.fromObject = function fromObject(object) {\n                if (object instanceof $root.simpleperf_report_proto.Sample.CallChainEntry)\n                    return object;\n                var message = new $root.simpleperf_report_proto.Sample.CallChainEntry();\n                if (object.vaddrInFile != null)\n                    if ($util.Long)\n                        (message.vaddrInFile = $util.Long.fromValue(object.vaddrInFile)).unsigned = true;\n                    else if (typeof object.vaddrInFile === \"string\")\n                        message.vaddrInFile = parseInt(object.vaddrInFile, 10);\n                    else if (typeof object.vaddrInFile === \"number\")\n                        message.vaddrInFile = object.vaddrInFile;\n                    else if (typeof object.vaddrInFile === \"object\")\n                        message.vaddrInFile = new $util.LongBits(object.vaddrInFile.low >>> 0, object.vaddrInFile.high >>> 0).toNumber(true);\n                if (object.fileId != null)\n                    message.fileId = object.fileId >>> 0;\n                if (object.symbolId != null)\n                    message.symbolId = object.symbolId | 0;\n                switch (object.executionType) {\n                default:\n                    if (typeof object.executionType === \"number\") {\n                        message.executionType = object.executionType;\n                        break;\n                    }\n                    break;\n                case \"NATIVE_METHOD\":\n                case 0:\n                    message.executionType = 0;\n                    break;\n                case \"INTERPRETED_JVM_METHOD\":\n                case 1:\n                    message.executionType = 1;\n                    break;\n                case \"JIT_JVM_METHOD\":\n                case 2:\n                    message.executionType = 2;\n                    break;\n                case \"ART_METHOD\":\n                case 3:\n                    message.executionType = 3;\n                    break;\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a CallChainEntry message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof simpleperf_report_proto.Sample.CallChainEntry\n             * @static\n             * @param {simpleperf_report_proto.Sample.CallChainEntry} message CallChainEntry\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            CallChainEntry.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.vaddrInFile = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.vaddrInFile = options.longs === String ? \"0\" : 0;\n                    object.fileId = 0;\n                    object.symbolId = 0;\n                    object.executionType = options.enums === String ? \"NATIVE_METHOD\" : 0;\n                }\n                if (message.vaddrInFile != null && message.hasOwnProperty(\"vaddrInFile\"))\n                    if (typeof message.vaddrInFile === \"number\")\n                        object.vaddrInFile = options.longs === String ? String(message.vaddrInFile) : message.vaddrInFile;\n                    else\n                        object.vaddrInFile = options.longs === String ? $util.Long.prototype.toString.call(message.vaddrInFile) : options.longs === Number ? new $util.LongBits(message.vaddrInFile.low >>> 0, message.vaddrInFile.high >>> 0).toNumber(true) : message.vaddrInFile;\n                if (message.fileId != null && message.hasOwnProperty(\"fileId\"))\n                    object.fileId = message.fileId;\n                if (message.symbolId != null && message.hasOwnProperty(\"symbolId\"))\n                    object.symbolId = message.symbolId;\n                if (message.executionType != null && message.hasOwnProperty(\"executionType\"))\n                    object.executionType = options.enums === String ? $root.simpleperf_report_proto.Sample.CallChainEntry.ExecutionType[message.executionType] === undefined ? message.executionType : $root.simpleperf_report_proto.Sample.CallChainEntry.ExecutionType[message.executionType] : message.executionType;\n                return object;\n            };\n\n            /**\n             * Converts this CallChainEntry to JSON.\n             * @function toJSON\n             * @memberof simpleperf_report_proto.Sample.CallChainEntry\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            CallChainEntry.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for CallChainEntry\n             * @function getTypeUrl\n             * @memberof simpleperf_report_proto.Sample.CallChainEntry\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            CallChainEntry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/simpleperf_report_proto.Sample.CallChainEntry\";\n            };\n\n            /**\n             * ExecutionType enum.\n             * @name simpleperf_report_proto.Sample.CallChainEntry.ExecutionType\n             * @enum {number}\n             * @property {number} NATIVE_METHOD=0 NATIVE_METHOD value\n             * @property {number} INTERPRETED_JVM_METHOD=1 INTERPRETED_JVM_METHOD value\n             * @property {number} JIT_JVM_METHOD=2 JIT_JVM_METHOD value\n             * @property {number} ART_METHOD=3 ART_METHOD value\n             */\n            CallChainEntry.ExecutionType = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"NATIVE_METHOD\"] = 0;\n                values[valuesById[1] = \"INTERPRETED_JVM_METHOD\"] = 1;\n                values[valuesById[2] = \"JIT_JVM_METHOD\"] = 2;\n                values[valuesById[3] = \"ART_METHOD\"] = 3;\n                return values;\n            })();\n\n            return CallChainEntry;\n        })();\n\n        Sample.UnwindingResult = (function() {\n\n            /**\n             * Properties of an UnwindingResult.\n             * @memberof simpleperf_report_proto.Sample\n             * @interface IUnwindingResult\n             * @property {number|null} [rawErrorCode] UnwindingResult rawErrorCode\n             * @property {number|Long|null} [errorAddr] UnwindingResult errorAddr\n             * @property {simpleperf_report_proto.Sample.UnwindingResult.ErrorCode|null} [errorCode] UnwindingResult errorCode\n             */\n\n            /**\n             * Constructs a new UnwindingResult.\n             * @memberof simpleperf_report_proto.Sample\n             * @classdesc Represents an UnwindingResult.\n             * @implements IUnwindingResult\n             * @constructor\n             * @param {simpleperf_report_proto.Sample.IUnwindingResult=} [properties] Properties to set\n             */\n            function UnwindingResult(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * UnwindingResult rawErrorCode.\n             * @member {number} rawErrorCode\n             * @memberof simpleperf_report_proto.Sample.UnwindingResult\n             * @instance\n             */\n            UnwindingResult.prototype.rawErrorCode = 0;\n\n            /**\n             * UnwindingResult errorAddr.\n             * @member {number|Long} errorAddr\n             * @memberof simpleperf_report_proto.Sample.UnwindingResult\n             * @instance\n             */\n            UnwindingResult.prototype.errorAddr = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * UnwindingResult errorCode.\n             * @member {simpleperf_report_proto.Sample.UnwindingResult.ErrorCode} errorCode\n             * @memberof simpleperf_report_proto.Sample.UnwindingResult\n             * @instance\n             */\n            UnwindingResult.prototype.errorCode = 0;\n\n            /**\n             * Creates a new UnwindingResult instance using the specified properties.\n             * @function create\n             * @memberof simpleperf_report_proto.Sample.UnwindingResult\n             * @static\n             * @param {simpleperf_report_proto.Sample.IUnwindingResult=} [properties] Properties to set\n             * @returns {simpleperf_report_proto.Sample.UnwindingResult} UnwindingResult instance\n             */\n            UnwindingResult.create = function create(properties) {\n                return new UnwindingResult(properties);\n            };\n\n            /**\n             * Encodes the specified UnwindingResult message. Does not implicitly {@link simpleperf_report_proto.Sample.UnwindingResult.verify|verify} messages.\n             * @function encode\n             * @memberof simpleperf_report_proto.Sample.UnwindingResult\n             * @static\n             * @param {simpleperf_report_proto.Sample.IUnwindingResult} message UnwindingResult message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            UnwindingResult.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.rawErrorCode != null && Object.hasOwnProperty.call(message, \"rawErrorCode\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rawErrorCode);\n                if (message.errorAddr != null && Object.hasOwnProperty.call(message, \"errorAddr\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.errorAddr);\n                if (message.errorCode != null && Object.hasOwnProperty.call(message, \"errorCode\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.errorCode);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified UnwindingResult message, length delimited. Does not implicitly {@link simpleperf_report_proto.Sample.UnwindingResult.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof simpleperf_report_proto.Sample.UnwindingResult\n             * @static\n             * @param {simpleperf_report_proto.Sample.IUnwindingResult} message UnwindingResult message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            UnwindingResult.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an UnwindingResult message from the specified reader or buffer.\n             * @function decode\n             * @memberof simpleperf_report_proto.Sample.UnwindingResult\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {simpleperf_report_proto.Sample.UnwindingResult} UnwindingResult\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            UnwindingResult.decode = function decode(reader, length, error) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.simpleperf_report_proto.Sample.UnwindingResult();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    if (tag === error)\n                        break;\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.rawErrorCode = reader.uint32();\n                            break;\n                        }\n                    case 2: {\n                            message.errorAddr = reader.uint64();\n                            break;\n                        }\n                    case 3: {\n                            message.errorCode = reader.int32();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an UnwindingResult message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof simpleperf_report_proto.Sample.UnwindingResult\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {simpleperf_report_proto.Sample.UnwindingResult} UnwindingResult\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            UnwindingResult.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an UnwindingResult message.\n             * @function verify\n             * @memberof simpleperf_report_proto.Sample.UnwindingResult\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            UnwindingResult.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.rawErrorCode != null && message.hasOwnProperty(\"rawErrorCode\"))\n                    if (!$util.isInteger(message.rawErrorCode))\n                        return \"rawErrorCode: integer expected\";\n                if (message.errorAddr != null && message.hasOwnProperty(\"errorAddr\"))\n                    if (!$util.isInteger(message.errorAddr) && !(message.errorAddr && $util.isInteger(message.errorAddr.low) && $util.isInteger(message.errorAddr.high)))\n                        return \"errorAddr: integer|Long expected\";\n                if (message.errorCode != null && message.hasOwnProperty(\"errorCode\"))\n                    switch (message.errorCode) {\n                    default:\n                        return \"errorCode: enum value expected\";\n                    case 0:\n                    case 1:\n                    case 2:\n                    case 3:\n                    case 4:\n                    case 5:\n                    case 6:\n                    case 7:\n                    case 8:\n                        break;\n                    }\n                return null;\n            };\n\n            /**\n             * Creates an UnwindingResult message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof simpleperf_report_proto.Sample.UnwindingResult\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {simpleperf_report_proto.Sample.UnwindingResult} UnwindingResult\n             */\n            UnwindingResult.fromObject = function fromObject(object) {\n                if (object instanceof $root.simpleperf_report_proto.Sample.UnwindingResult)\n                    return object;\n                var message = new $root.simpleperf_report_proto.Sample.UnwindingResult();\n                if (object.rawErrorCode != null)\n                    message.rawErrorCode = object.rawErrorCode >>> 0;\n                if (object.errorAddr != null)\n                    if ($util.Long)\n                        (message.errorAddr = $util.Long.fromValue(object.errorAddr)).unsigned = true;\n                    else if (typeof object.errorAddr === \"string\")\n                        message.errorAddr = parseInt(object.errorAddr, 10);\n                    else if (typeof object.errorAddr === \"number\")\n                        message.errorAddr = object.errorAddr;\n                    else if (typeof object.errorAddr === \"object\")\n                        message.errorAddr = new $util.LongBits(object.errorAddr.low >>> 0, object.errorAddr.high >>> 0).toNumber(true);\n                switch (object.errorCode) {\n                default:\n                    if (typeof object.errorCode === \"number\") {\n                        message.errorCode = object.errorCode;\n                        break;\n                    }\n                    break;\n                case \"ERROR_NONE\":\n                case 0:\n                    message.errorCode = 0;\n                    break;\n                case \"ERROR_UNKNOWN\":\n                case 1:\n                    message.errorCode = 1;\n                    break;\n                case \"ERROR_NOT_ENOUGH_STACK\":\n                case 2:\n                    message.errorCode = 2;\n                    break;\n                case \"ERROR_MEMORY_INVALID\":\n                case 3:\n                    message.errorCode = 3;\n                    break;\n                case \"ERROR_UNWIND_INFO\":\n                case 4:\n                    message.errorCode = 4;\n                    break;\n                case \"ERROR_INVALID_MAP\":\n                case 5:\n                    message.errorCode = 5;\n                    break;\n                case \"ERROR_MAX_FRAME_EXCEEDED\":\n                case 6:\n                    message.errorCode = 6;\n                    break;\n                case \"ERROR_REPEATED_FRAME\":\n                case 7:\n                    message.errorCode = 7;\n                    break;\n                case \"ERROR_INVALID_ELF\":\n                case 8:\n                    message.errorCode = 8;\n                    break;\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an UnwindingResult message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof simpleperf_report_proto.Sample.UnwindingResult\n             * @static\n             * @param {simpleperf_report_proto.Sample.UnwindingResult} message UnwindingResult\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            UnwindingResult.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.rawErrorCode = 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.errorAddr = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.errorAddr = options.longs === String ? \"0\" : 0;\n                    object.errorCode = options.enums === String ? \"ERROR_NONE\" : 0;\n                }\n                if (message.rawErrorCode != null && message.hasOwnProperty(\"rawErrorCode\"))\n                    object.rawErrorCode = message.rawErrorCode;\n                if (message.errorAddr != null && message.hasOwnProperty(\"errorAddr\"))\n                    if (typeof message.errorAddr === \"number\")\n                        object.errorAddr = options.longs === String ? String(message.errorAddr) : message.errorAddr;\n                    else\n                        object.errorAddr = options.longs === String ? $util.Long.prototype.toString.call(message.errorAddr) : options.longs === Number ? new $util.LongBits(message.errorAddr.low >>> 0, message.errorAddr.high >>> 0).toNumber(true) : message.errorAddr;\n                if (message.errorCode != null && message.hasOwnProperty(\"errorCode\"))\n                    object.errorCode = options.enums === String ? $root.simpleperf_report_proto.Sample.UnwindingResult.ErrorCode[message.errorCode] === undefined ? message.errorCode : $root.simpleperf_report_proto.Sample.UnwindingResult.ErrorCode[message.errorCode] : message.errorCode;\n                return object;\n            };\n\n            /**\n             * Converts this UnwindingResult to JSON.\n             * @function toJSON\n             * @memberof simpleperf_report_proto.Sample.UnwindingResult\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            UnwindingResult.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for UnwindingResult\n             * @function getTypeUrl\n             * @memberof simpleperf_report_proto.Sample.UnwindingResult\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            UnwindingResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/simpleperf_report_proto.Sample.UnwindingResult\";\n            };\n\n            /**\n             * ErrorCode enum.\n             * @name simpleperf_report_proto.Sample.UnwindingResult.ErrorCode\n             * @enum {number}\n             * @property {number} ERROR_NONE=0 ERROR_NONE value\n             * @property {number} ERROR_UNKNOWN=1 ERROR_UNKNOWN value\n             * @property {number} ERROR_NOT_ENOUGH_STACK=2 ERROR_NOT_ENOUGH_STACK value\n             * @property {number} ERROR_MEMORY_INVALID=3 ERROR_MEMORY_INVALID value\n             * @property {number} ERROR_UNWIND_INFO=4 ERROR_UNWIND_INFO value\n             * @property {number} ERROR_INVALID_MAP=5 ERROR_INVALID_MAP value\n             * @property {number} ERROR_MAX_FRAME_EXCEEDED=6 ERROR_MAX_FRAME_EXCEEDED value\n             * @property {number} ERROR_REPEATED_FRAME=7 ERROR_REPEATED_FRAME value\n             * @property {number} ERROR_INVALID_ELF=8 ERROR_INVALID_ELF value\n             */\n            UnwindingResult.ErrorCode = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"ERROR_NONE\"] = 0;\n                values[valuesById[1] = \"ERROR_UNKNOWN\"] = 1;\n                values[valuesById[2] = \"ERROR_NOT_ENOUGH_STACK\"] = 2;\n                values[valuesById[3] = \"ERROR_MEMORY_INVALID\"] = 3;\n                values[valuesById[4] = \"ERROR_UNWIND_INFO\"] = 4;\n                values[valuesById[5] = \"ERROR_INVALID_MAP\"] = 5;\n                values[valuesById[6] = \"ERROR_MAX_FRAME_EXCEEDED\"] = 6;\n                values[valuesById[7] = \"ERROR_REPEATED_FRAME\"] = 7;\n                values[valuesById[8] = \"ERROR_INVALID_ELF\"] = 8;\n                return values;\n            })();\n\n            return UnwindingResult;\n        })();\n\n        return Sample;\n    })();\n\n    simpleperf_report_proto.LostSituation = (function() {\n\n        /**\n         * Properties of a LostSituation.\n         * @memberof simpleperf_report_proto\n         * @interface ILostSituation\n         * @property {number|Long|null} [sampleCount] LostSituation sampleCount\n         * @property {number|Long|null} [lostCount] LostSituation lostCount\n         */\n\n        /**\n         * Constructs a new LostSituation.\n         * @memberof simpleperf_report_proto\n         * @classdesc Represents a LostSituation.\n         * @implements ILostSituation\n         * @constructor\n         * @param {simpleperf_report_proto.ILostSituation=} [properties] Properties to set\n         */\n        function LostSituation(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LostSituation sampleCount.\n         * @member {number|Long} sampleCount\n         * @memberof simpleperf_report_proto.LostSituation\n         * @instance\n         */\n        LostSituation.prototype.sampleCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * LostSituation lostCount.\n         * @member {number|Long} lostCount\n         * @memberof simpleperf_report_proto.LostSituation\n         * @instance\n         */\n        LostSituation.prototype.lostCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Creates a new LostSituation instance using the specified properties.\n         * @function create\n         * @memberof simpleperf_report_proto.LostSituation\n         * @static\n         * @param {simpleperf_report_proto.ILostSituation=} [properties] Properties to set\n         * @returns {simpleperf_report_proto.LostSituation} LostSituation instance\n         */\n        LostSituation.create = function create(properties) {\n            return new LostSituation(properties);\n        };\n\n        /**\n         * Encodes the specified LostSituation message. Does not implicitly {@link simpleperf_report_proto.LostSituation.verify|verify} messages.\n         * @function encode\n         * @memberof simpleperf_report_proto.LostSituation\n         * @static\n         * @param {simpleperf_report_proto.ILostSituation} message LostSituation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LostSituation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.sampleCount != null && Object.hasOwnProperty.call(message, \"sampleCount\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sampleCount);\n            if (message.lostCount != null && Object.hasOwnProperty.call(message, \"lostCount\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.lostCount);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LostSituation message, length delimited. Does not implicitly {@link simpleperf_report_proto.LostSituation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof simpleperf_report_proto.LostSituation\n         * @static\n         * @param {simpleperf_report_proto.ILostSituation} message LostSituation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LostSituation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LostSituation message from the specified reader or buffer.\n         * @function decode\n         * @memberof simpleperf_report_proto.LostSituation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {simpleperf_report_proto.LostSituation} LostSituation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LostSituation.decode = function decode(reader, length, error) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.simpleperf_report_proto.LostSituation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                if (tag === error)\n                    break;\n                switch (tag >>> 3) {\n                case 1: {\n                        message.sampleCount = reader.uint64();\n                        break;\n                    }\n                case 2: {\n                        message.lostCount = reader.uint64();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LostSituation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof simpleperf_report_proto.LostSituation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {simpleperf_report_proto.LostSituation} LostSituation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LostSituation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LostSituation message.\n         * @function verify\n         * @memberof simpleperf_report_proto.LostSituation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LostSituation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.sampleCount != null && message.hasOwnProperty(\"sampleCount\"))\n                if (!$util.isInteger(message.sampleCount) && !(message.sampleCount && $util.isInteger(message.sampleCount.low) && $util.isInteger(message.sampleCount.high)))\n                    return \"sampleCount: integer|Long expected\";\n            if (message.lostCount != null && message.hasOwnProperty(\"lostCount\"))\n                if (!$util.isInteger(message.lostCount) && !(message.lostCount && $util.isInteger(message.lostCount.low) && $util.isInteger(message.lostCount.high)))\n                    return \"lostCount: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a LostSituation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof simpleperf_report_proto.LostSituation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {simpleperf_report_proto.LostSituation} LostSituation\n         */\n        LostSituation.fromObject = function fromObject(object) {\n            if (object instanceof $root.simpleperf_report_proto.LostSituation)\n                return object;\n            var message = new $root.simpleperf_report_proto.LostSituation();\n            if (object.sampleCount != null)\n                if ($util.Long)\n                    (message.sampleCount = $util.Long.fromValue(object.sampleCount)).unsigned = true;\n                else if (typeof object.sampleCount === \"string\")\n                    message.sampleCount = parseInt(object.sampleCount, 10);\n                else if (typeof object.sampleCount === \"number\")\n                    message.sampleCount = object.sampleCount;\n                else if (typeof object.sampleCount === \"object\")\n                    message.sampleCount = new $util.LongBits(object.sampleCount.low >>> 0, object.sampleCount.high >>> 0).toNumber(true);\n            if (object.lostCount != null)\n                if ($util.Long)\n                    (message.lostCount = $util.Long.fromValue(object.lostCount)).unsigned = true;\n                else if (typeof object.lostCount === \"string\")\n                    message.lostCount = parseInt(object.lostCount, 10);\n                else if (typeof object.lostCount === \"number\")\n                    message.lostCount = object.lostCount;\n                else if (typeof object.lostCount === \"object\")\n                    message.lostCount = new $util.LongBits(object.lostCount.low >>> 0, object.lostCount.high >>> 0).toNumber(true);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LostSituation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof simpleperf_report_proto.LostSituation\n         * @static\n         * @param {simpleperf_report_proto.LostSituation} message LostSituation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LostSituation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.sampleCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.sampleCount = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.lostCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.lostCount = options.longs === String ? \"0\" : 0;\n            }\n            if (message.sampleCount != null && message.hasOwnProperty(\"sampleCount\"))\n                if (typeof message.sampleCount === \"number\")\n                    object.sampleCount = options.longs === String ? String(message.sampleCount) : message.sampleCount;\n                else\n                    object.sampleCount = options.longs === String ? $util.Long.prototype.toString.call(message.sampleCount) : options.longs === Number ? new $util.LongBits(message.sampleCount.low >>> 0, message.sampleCount.high >>> 0).toNumber(true) : message.sampleCount;\n            if (message.lostCount != null && message.hasOwnProperty(\"lostCount\"))\n                if (typeof message.lostCount === \"number\")\n                    object.lostCount = options.longs === String ? String(message.lostCount) : message.lostCount;\n                else\n                    object.lostCount = options.longs === String ? $util.Long.prototype.toString.call(message.lostCount) : options.longs === Number ? new $util.LongBits(message.lostCount.low >>> 0, message.lostCount.high >>> 0).toNumber(true) : message.lostCount;\n            return object;\n        };\n\n        /**\n         * Converts this LostSituation to JSON.\n         * @function toJSON\n         * @memberof simpleperf_report_proto.LostSituation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LostSituation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for LostSituation\n         * @function getTypeUrl\n         * @memberof simpleperf_report_proto.LostSituation\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        LostSituation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/simpleperf_report_proto.LostSituation\";\n        };\n\n        return LostSituation;\n    })();\n\n    simpleperf_report_proto.File = (function() {\n\n        /**\n         * Properties of a File.\n         * @memberof simpleperf_report_proto\n         * @interface IFile\n         * @property {number|null} [id] File id\n         * @property {string|null} [path] File path\n         * @property {Array.<string>|null} [symbol] File symbol\n         * @property {Array.<string>|null} [mangledSymbol] File mangledSymbol\n         */\n\n        /**\n         * Constructs a new File.\n         * @memberof simpleperf_report_proto\n         * @classdesc Represents a File.\n         * @implements IFile\n         * @constructor\n         * @param {simpleperf_report_proto.IFile=} [properties] Properties to set\n         */\n        function File(properties) {\n            this.symbol = [];\n            this.mangledSymbol = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * File id.\n         * @member {number} id\n         * @memberof simpleperf_report_proto.File\n         * @instance\n         */\n        File.prototype.id = 0;\n\n        /**\n         * File path.\n         * @member {string} path\n         * @memberof simpleperf_report_proto.File\n         * @instance\n         */\n        File.prototype.path = \"\";\n\n        /**\n         * File symbol.\n         * @member {Array.<string>} symbol\n         * @memberof simpleperf_report_proto.File\n         * @instance\n         */\n        File.prototype.symbol = $util.emptyArray;\n\n        /**\n         * File mangledSymbol.\n         * @member {Array.<string>} mangledSymbol\n         * @memberof simpleperf_report_proto.File\n         * @instance\n         */\n        File.prototype.mangledSymbol = $util.emptyArray;\n\n        /**\n         * Creates a new File instance using the specified properties.\n         * @function create\n         * @memberof simpleperf_report_proto.File\n         * @static\n         * @param {simpleperf_report_proto.IFile=} [properties] Properties to set\n         * @returns {simpleperf_report_proto.File} File instance\n         */\n        File.create = function create(properties) {\n            return new File(properties);\n        };\n\n        /**\n         * Encodes the specified File message. Does not implicitly {@link simpleperf_report_proto.File.verify|verify} messages.\n         * @function encode\n         * @memberof simpleperf_report_proto.File\n         * @static\n         * @param {simpleperf_report_proto.IFile} message File message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        File.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);\n            if (message.path != null && Object.hasOwnProperty.call(message, \"path\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);\n            if (message.symbol != null && message.symbol.length)\n                for (var i = 0; i < message.symbol.length; ++i)\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.symbol[i]);\n            if (message.mangledSymbol != null && message.mangledSymbol.length)\n                for (var i = 0; i < message.mangledSymbol.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.mangledSymbol[i]);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified File message, length delimited. Does not implicitly {@link simpleperf_report_proto.File.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof simpleperf_report_proto.File\n         * @static\n         * @param {simpleperf_report_proto.IFile} message File message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        File.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a File message from the specified reader or buffer.\n         * @function decode\n         * @memberof simpleperf_report_proto.File\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {simpleperf_report_proto.File} File\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        File.decode = function decode(reader, length, error) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.simpleperf_report_proto.File();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                if (tag === error)\n                    break;\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.uint32();\n                        break;\n                    }\n                case 2: {\n                        message.path = reader.string();\n                        break;\n                    }\n                case 3: {\n                        if (!(message.symbol && message.symbol.length))\n                            message.symbol = [];\n                        message.symbol.push(reader.string());\n                        break;\n                    }\n                case 4: {\n                        if (!(message.mangledSymbol && message.mangledSymbol.length))\n                            message.mangledSymbol = [];\n                        message.mangledSymbol.push(reader.string());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a File message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof simpleperf_report_proto.File\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {simpleperf_report_proto.File} File\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        File.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a File message.\n         * @function verify\n         * @memberof simpleperf_report_proto.File\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        File.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isInteger(message.id))\n                    return \"id: integer expected\";\n            if (message.path != null && message.hasOwnProperty(\"path\"))\n                if (!$util.isString(message.path))\n                    return \"path: string expected\";\n            if (message.symbol != null && message.hasOwnProperty(\"symbol\")) {\n                if (!Array.isArray(message.symbol))\n                    return \"symbol: array expected\";\n                for (var i = 0; i < message.symbol.length; ++i)\n                    if (!$util.isString(message.symbol[i]))\n                        return \"symbol: string[] expected\";\n            }\n            if (message.mangledSymbol != null && message.hasOwnProperty(\"mangledSymbol\")) {\n                if (!Array.isArray(message.mangledSymbol))\n                    return \"mangledSymbol: array expected\";\n                for (var i = 0; i < message.mangledSymbol.length; ++i)\n                    if (!$util.isString(message.mangledSymbol[i]))\n                        return \"mangledSymbol: string[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a File message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof simpleperf_report_proto.File\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {simpleperf_report_proto.File} File\n         */\n        File.fromObject = function fromObject(object) {\n            if (object instanceof $root.simpleperf_report_proto.File)\n                return object;\n            var message = new $root.simpleperf_report_proto.File();\n            if (object.id != null)\n                message.id = object.id >>> 0;\n            if (object.path != null)\n                message.path = String(object.path);\n            if (object.symbol) {\n                if (!Array.isArray(object.symbol))\n                    throw TypeError(\".simpleperf_report_proto.File.symbol: array expected\");\n                message.symbol = [];\n                for (var i = 0; i < object.symbol.length; ++i)\n                    message.symbol[i] = String(object.symbol[i]);\n            }\n            if (object.mangledSymbol) {\n                if (!Array.isArray(object.mangledSymbol))\n                    throw TypeError(\".simpleperf_report_proto.File.mangledSymbol: array expected\");\n                message.mangledSymbol = [];\n                for (var i = 0; i < object.mangledSymbol.length; ++i)\n                    message.mangledSymbol[i] = String(object.mangledSymbol[i]);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a File message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof simpleperf_report_proto.File\n         * @static\n         * @param {simpleperf_report_proto.File} message File\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        File.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.symbol = [];\n                object.mangledSymbol = [];\n            }\n            if (options.defaults) {\n                object.id = 0;\n                object.path = \"\";\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.path != null && message.hasOwnProperty(\"path\"))\n                object.path = message.path;\n            if (message.symbol && message.symbol.length) {\n                object.symbol = [];\n                for (var j = 0; j < message.symbol.length; ++j)\n                    object.symbol[j] = message.symbol[j];\n            }\n            if (message.mangledSymbol && message.mangledSymbol.length) {\n                object.mangledSymbol = [];\n                for (var j = 0; j < message.mangledSymbol.length; ++j)\n                    object.mangledSymbol[j] = message.mangledSymbol[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this File to JSON.\n         * @function toJSON\n         * @memberof simpleperf_report_proto.File\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        File.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for File\n         * @function getTypeUrl\n         * @memberof simpleperf_report_proto.File\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        File.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/simpleperf_report_proto.File\";\n        };\n\n        return File;\n    })();\n\n    simpleperf_report_proto.Thread = (function() {\n\n        /**\n         * Properties of a Thread.\n         * @memberof simpleperf_report_proto\n         * @interface IThread\n         * @property {number|null} [threadId] Thread threadId\n         * @property {number|null} [processId] Thread processId\n         * @property {string|null} [threadName] Thread threadName\n         */\n\n        /**\n         * Constructs a new Thread.\n         * @memberof simpleperf_report_proto\n         * @classdesc Represents a Thread.\n         * @implements IThread\n         * @constructor\n         * @param {simpleperf_report_proto.IThread=} [properties] Properties to set\n         */\n        function Thread(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Thread threadId.\n         * @member {number} threadId\n         * @memberof simpleperf_report_proto.Thread\n         * @instance\n         */\n        Thread.prototype.threadId = 0;\n\n        /**\n         * Thread processId.\n         * @member {number} processId\n         * @memberof simpleperf_report_proto.Thread\n         * @instance\n         */\n        Thread.prototype.processId = 0;\n\n        /**\n         * Thread threadName.\n         * @member {string} threadName\n         * @memberof simpleperf_report_proto.Thread\n         * @instance\n         */\n        Thread.prototype.threadName = \"\";\n\n        /**\n         * Creates a new Thread instance using the specified properties.\n         * @function create\n         * @memberof simpleperf_report_proto.Thread\n         * @static\n         * @param {simpleperf_report_proto.IThread=} [properties] Properties to set\n         * @returns {simpleperf_report_proto.Thread} Thread instance\n         */\n        Thread.create = function create(properties) {\n            return new Thread(properties);\n        };\n\n        /**\n         * Encodes the specified Thread message. Does not implicitly {@link simpleperf_report_proto.Thread.verify|verify} messages.\n         * @function encode\n         * @memberof simpleperf_report_proto.Thread\n         * @static\n         * @param {simpleperf_report_proto.IThread} message Thread message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Thread.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.threadId != null && Object.hasOwnProperty.call(message, \"threadId\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.threadId);\n            if (message.processId != null && Object.hasOwnProperty.call(message, \"processId\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.processId);\n            if (message.threadName != null && Object.hasOwnProperty.call(message, \"threadName\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.threadName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Thread message, length delimited. Does not implicitly {@link simpleperf_report_proto.Thread.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof simpleperf_report_proto.Thread\n         * @static\n         * @param {simpleperf_report_proto.IThread} message Thread message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Thread.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Thread message from the specified reader or buffer.\n         * @function decode\n         * @memberof simpleperf_report_proto.Thread\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {simpleperf_report_proto.Thread} Thread\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Thread.decode = function decode(reader, length, error) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.simpleperf_report_proto.Thread();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                if (tag === error)\n                    break;\n                switch (tag >>> 3) {\n                case 1: {\n                        message.threadId = reader.uint32();\n                        break;\n                    }\n                case 2: {\n                        message.processId = reader.uint32();\n                        break;\n                    }\n                case 3: {\n                        message.threadName = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Thread message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof simpleperf_report_proto.Thread\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {simpleperf_report_proto.Thread} Thread\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Thread.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Thread message.\n         * @function verify\n         * @memberof simpleperf_report_proto.Thread\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Thread.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n                if (!$util.isInteger(message.threadId))\n                    return \"threadId: integer expected\";\n            if (message.processId != null && message.hasOwnProperty(\"processId\"))\n                if (!$util.isInteger(message.processId))\n                    return \"processId: integer expected\";\n            if (message.threadName != null && message.hasOwnProperty(\"threadName\"))\n                if (!$util.isString(message.threadName))\n                    return \"threadName: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Thread message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof simpleperf_report_proto.Thread\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {simpleperf_report_proto.Thread} Thread\n         */\n        Thread.fromObject = function fromObject(object) {\n            if (object instanceof $root.simpleperf_report_proto.Thread)\n                return object;\n            var message = new $root.simpleperf_report_proto.Thread();\n            if (object.threadId != null)\n                message.threadId = object.threadId >>> 0;\n            if (object.processId != null)\n                message.processId = object.processId >>> 0;\n            if (object.threadName != null)\n                message.threadName = String(object.threadName);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Thread message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof simpleperf_report_proto.Thread\n         * @static\n         * @param {simpleperf_report_proto.Thread} message Thread\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Thread.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.threadId = 0;\n                object.processId = 0;\n                object.threadName = \"\";\n            }\n            if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n                object.threadId = message.threadId;\n            if (message.processId != null && message.hasOwnProperty(\"processId\"))\n                object.processId = message.processId;\n            if (message.threadName != null && message.hasOwnProperty(\"threadName\"))\n                object.threadName = message.threadName;\n            return object;\n        };\n\n        /**\n         * Converts this Thread to JSON.\n         * @function toJSON\n         * @memberof simpleperf_report_proto.Thread\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Thread.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Thread\n         * @function getTypeUrl\n         * @memberof simpleperf_report_proto.Thread\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Thread.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/simpleperf_report_proto.Thread\";\n        };\n\n        return Thread;\n    })();\n\n    simpleperf_report_proto.MetaInfo = (function() {\n\n        /**\n         * Properties of a MetaInfo.\n         * @memberof simpleperf_report_proto\n         * @interface IMetaInfo\n         * @property {Array.<string>|null} [eventType] MetaInfo eventType\n         * @property {string|null} [appPackageName] MetaInfo appPackageName\n         * @property {string|null} [appType] MetaInfo appType\n         * @property {string|null} [androidSdkVersion] MetaInfo androidSdkVersion\n         * @property {string|null} [androidBuildType] MetaInfo androidBuildType\n         * @property {boolean|null} [traceOffcpu] MetaInfo traceOffcpu\n         */\n\n        /**\n         * Constructs a new MetaInfo.\n         * @memberof simpleperf_report_proto\n         * @classdesc Represents a MetaInfo.\n         * @implements IMetaInfo\n         * @constructor\n         * @param {simpleperf_report_proto.IMetaInfo=} [properties] Properties to set\n         */\n        function MetaInfo(properties) {\n            this.eventType = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * MetaInfo eventType.\n         * @member {Array.<string>} eventType\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @instance\n         */\n        MetaInfo.prototype.eventType = $util.emptyArray;\n\n        /**\n         * MetaInfo appPackageName.\n         * @member {string} appPackageName\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @instance\n         */\n        MetaInfo.prototype.appPackageName = \"\";\n\n        /**\n         * MetaInfo appType.\n         * @member {string} appType\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @instance\n         */\n        MetaInfo.prototype.appType = \"\";\n\n        /**\n         * MetaInfo androidSdkVersion.\n         * @member {string} androidSdkVersion\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @instance\n         */\n        MetaInfo.prototype.androidSdkVersion = \"\";\n\n        /**\n         * MetaInfo androidBuildType.\n         * @member {string} androidBuildType\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @instance\n         */\n        MetaInfo.prototype.androidBuildType = \"\";\n\n        /**\n         * MetaInfo traceOffcpu.\n         * @member {boolean} traceOffcpu\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @instance\n         */\n        MetaInfo.prototype.traceOffcpu = false;\n\n        /**\n         * Creates a new MetaInfo instance using the specified properties.\n         * @function create\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @static\n         * @param {simpleperf_report_proto.IMetaInfo=} [properties] Properties to set\n         * @returns {simpleperf_report_proto.MetaInfo} MetaInfo instance\n         */\n        MetaInfo.create = function create(properties) {\n            return new MetaInfo(properties);\n        };\n\n        /**\n         * Encodes the specified MetaInfo message. Does not implicitly {@link simpleperf_report_proto.MetaInfo.verify|verify} messages.\n         * @function encode\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @static\n         * @param {simpleperf_report_proto.IMetaInfo} message MetaInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        MetaInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.eventType != null && message.eventType.length)\n                for (var i = 0; i < message.eventType.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.eventType[i]);\n            if (message.appPackageName != null && Object.hasOwnProperty.call(message, \"appPackageName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.appPackageName);\n            if (message.appType != null && Object.hasOwnProperty.call(message, \"appType\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.appType);\n            if (message.androidSdkVersion != null && Object.hasOwnProperty.call(message, \"androidSdkVersion\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.androidSdkVersion);\n            if (message.androidBuildType != null && Object.hasOwnProperty.call(message, \"androidBuildType\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.androidBuildType);\n            if (message.traceOffcpu != null && Object.hasOwnProperty.call(message, \"traceOffcpu\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.traceOffcpu);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified MetaInfo message, length delimited. Does not implicitly {@link simpleperf_report_proto.MetaInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @static\n         * @param {simpleperf_report_proto.IMetaInfo} message MetaInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        MetaInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a MetaInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {simpleperf_report_proto.MetaInfo} MetaInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        MetaInfo.decode = function decode(reader, length, error) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.simpleperf_report_proto.MetaInfo();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                if (tag === error)\n                    break;\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.eventType && message.eventType.length))\n                            message.eventType = [];\n                        message.eventType.push(reader.string());\n                        break;\n                    }\n                case 2: {\n                        message.appPackageName = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.appType = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.androidSdkVersion = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.androidBuildType = reader.string();\n                        break;\n                    }\n                case 6: {\n                        message.traceOffcpu = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a MetaInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {simpleperf_report_proto.MetaInfo} MetaInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        MetaInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a MetaInfo message.\n         * @function verify\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        MetaInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.eventType != null && message.hasOwnProperty(\"eventType\")) {\n                if (!Array.isArray(message.eventType))\n                    return \"eventType: array expected\";\n                for (var i = 0; i < message.eventType.length; ++i)\n                    if (!$util.isString(message.eventType[i]))\n                        return \"eventType: string[] expected\";\n            }\n            if (message.appPackageName != null && message.hasOwnProperty(\"appPackageName\"))\n                if (!$util.isString(message.appPackageName))\n                    return \"appPackageName: string expected\";\n            if (message.appType != null && message.hasOwnProperty(\"appType\"))\n                if (!$util.isString(message.appType))\n                    return \"appType: string expected\";\n            if (message.androidSdkVersion != null && message.hasOwnProperty(\"androidSdkVersion\"))\n                if (!$util.isString(message.androidSdkVersion))\n                    return \"androidSdkVersion: string expected\";\n            if (message.androidBuildType != null && message.hasOwnProperty(\"androidBuildType\"))\n                if (!$util.isString(message.androidBuildType))\n                    return \"androidBuildType: string expected\";\n            if (message.traceOffcpu != null && message.hasOwnProperty(\"traceOffcpu\"))\n                if (typeof message.traceOffcpu !== \"boolean\")\n                    return \"traceOffcpu: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a MetaInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {simpleperf_report_proto.MetaInfo} MetaInfo\n         */\n        MetaInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.simpleperf_report_proto.MetaInfo)\n                return object;\n            var message = new $root.simpleperf_report_proto.MetaInfo();\n            if (object.eventType) {\n                if (!Array.isArray(object.eventType))\n                    throw TypeError(\".simpleperf_report_proto.MetaInfo.eventType: array expected\");\n                message.eventType = [];\n                for (var i = 0; i < object.eventType.length; ++i)\n                    message.eventType[i] = String(object.eventType[i]);\n            }\n            if (object.appPackageName != null)\n                message.appPackageName = String(object.appPackageName);\n            if (object.appType != null)\n                message.appType = String(object.appType);\n            if (object.androidSdkVersion != null)\n                message.androidSdkVersion = String(object.androidSdkVersion);\n            if (object.androidBuildType != null)\n                message.androidBuildType = String(object.androidBuildType);\n            if (object.traceOffcpu != null)\n                message.traceOffcpu = Boolean(object.traceOffcpu);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a MetaInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @static\n         * @param {simpleperf_report_proto.MetaInfo} message MetaInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        MetaInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.eventType = [];\n            if (options.defaults) {\n                object.appPackageName = \"\";\n                object.appType = \"\";\n                object.androidSdkVersion = \"\";\n                object.androidBuildType = \"\";\n                object.traceOffcpu = false;\n            }\n            if (message.eventType && message.eventType.length) {\n                object.eventType = [];\n                for (var j = 0; j < message.eventType.length; ++j)\n                    object.eventType[j] = message.eventType[j];\n            }\n            if (message.appPackageName != null && message.hasOwnProperty(\"appPackageName\"))\n                object.appPackageName = message.appPackageName;\n            if (message.appType != null && message.hasOwnProperty(\"appType\"))\n                object.appType = message.appType;\n            if (message.androidSdkVersion != null && message.hasOwnProperty(\"androidSdkVersion\"))\n                object.androidSdkVersion = message.androidSdkVersion;\n            if (message.androidBuildType != null && message.hasOwnProperty(\"androidBuildType\"))\n                object.androidBuildType = message.androidBuildType;\n            if (message.traceOffcpu != null && message.hasOwnProperty(\"traceOffcpu\"))\n                object.traceOffcpu = message.traceOffcpu;\n            return object;\n        };\n\n        /**\n         * Converts this MetaInfo to JSON.\n         * @function toJSON\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        MetaInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for MetaInfo\n         * @function getTypeUrl\n         * @memberof simpleperf_report_proto.MetaInfo\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        MetaInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/simpleperf_report_proto.MetaInfo\";\n        };\n\n        return MetaInfo;\n    })();\n\n    simpleperf_report_proto.ContextSwitch = (function() {\n\n        /**\n         * Properties of a ContextSwitch.\n         * @memberof simpleperf_report_proto\n         * @interface IContextSwitch\n         * @property {boolean|null} [switchOn] ContextSwitch switchOn\n         * @property {number|Long|null} [time] ContextSwitch time\n         * @property {number|null} [threadId] ContextSwitch threadId\n         */\n\n        /**\n         * Constructs a new ContextSwitch.\n         * @memberof simpleperf_report_proto\n         * @classdesc Represents a ContextSwitch.\n         * @implements IContextSwitch\n         * @constructor\n         * @param {simpleperf_report_proto.IContextSwitch=} [properties] Properties to set\n         */\n        function ContextSwitch(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ContextSwitch switchOn.\n         * @member {boolean} switchOn\n         * @memberof simpleperf_report_proto.ContextSwitch\n         * @instance\n         */\n        ContextSwitch.prototype.switchOn = false;\n\n        /**\n         * ContextSwitch time.\n         * @member {number|Long} time\n         * @memberof simpleperf_report_proto.ContextSwitch\n         * @instance\n         */\n        ContextSwitch.prototype.time = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * ContextSwitch threadId.\n         * @member {number} threadId\n         * @memberof simpleperf_report_proto.ContextSwitch\n         * @instance\n         */\n        ContextSwitch.prototype.threadId = 0;\n\n        /**\n         * Creates a new ContextSwitch instance using the specified properties.\n         * @function create\n         * @memberof simpleperf_report_proto.ContextSwitch\n         * @static\n         * @param {simpleperf_report_proto.IContextSwitch=} [properties] Properties to set\n         * @returns {simpleperf_report_proto.ContextSwitch} ContextSwitch instance\n         */\n        ContextSwitch.create = function create(properties) {\n            return new ContextSwitch(properties);\n        };\n\n        /**\n         * Encodes the specified ContextSwitch message. Does not implicitly {@link simpleperf_report_proto.ContextSwitch.verify|verify} messages.\n         * @function encode\n         * @memberof simpleperf_report_proto.ContextSwitch\n         * @static\n         * @param {simpleperf_report_proto.IContextSwitch} message ContextSwitch message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContextSwitch.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.switchOn != null && Object.hasOwnProperty.call(message, \"switchOn\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.switchOn);\n            if (message.time != null && Object.hasOwnProperty.call(message, \"time\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.time);\n            if (message.threadId != null && Object.hasOwnProperty.call(message, \"threadId\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.threadId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ContextSwitch message, length delimited. Does not implicitly {@link simpleperf_report_proto.ContextSwitch.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof simpleperf_report_proto.ContextSwitch\n         * @static\n         * @param {simpleperf_report_proto.IContextSwitch} message ContextSwitch message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContextSwitch.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ContextSwitch message from the specified reader or buffer.\n         * @function decode\n         * @memberof simpleperf_report_proto.ContextSwitch\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {simpleperf_report_proto.ContextSwitch} ContextSwitch\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContextSwitch.decode = function decode(reader, length, error) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.simpleperf_report_proto.ContextSwitch();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                if (tag === error)\n                    break;\n                switch (tag >>> 3) {\n                case 1: {\n                        message.switchOn = reader.bool();\n                        break;\n                    }\n                case 2: {\n                        message.time = reader.uint64();\n                        break;\n                    }\n                case 3: {\n                        message.threadId = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ContextSwitch message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof simpleperf_report_proto.ContextSwitch\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {simpleperf_report_proto.ContextSwitch} ContextSwitch\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContextSwitch.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ContextSwitch message.\n         * @function verify\n         * @memberof simpleperf_report_proto.ContextSwitch\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ContextSwitch.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.switchOn != null && message.hasOwnProperty(\"switchOn\"))\n                if (typeof message.switchOn !== \"boolean\")\n                    return \"switchOn: boolean expected\";\n            if (message.time != null && message.hasOwnProperty(\"time\"))\n                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))\n                    return \"time: integer|Long expected\";\n            if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n                if (!$util.isInteger(message.threadId))\n                    return \"threadId: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ContextSwitch message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof simpleperf_report_proto.ContextSwitch\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {simpleperf_report_proto.ContextSwitch} ContextSwitch\n         */\n        ContextSwitch.fromObject = function fromObject(object) {\n            if (object instanceof $root.simpleperf_report_proto.ContextSwitch)\n                return object;\n            var message = new $root.simpleperf_report_proto.ContextSwitch();\n            if (object.switchOn != null)\n                message.switchOn = Boolean(object.switchOn);\n            if (object.time != null)\n                if ($util.Long)\n                    (message.time = $util.Long.fromValue(object.time)).unsigned = true;\n                else if (typeof object.time === \"string\")\n                    message.time = parseInt(object.time, 10);\n                else if (typeof object.time === \"number\")\n                    message.time = object.time;\n                else if (typeof object.time === \"object\")\n                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber(true);\n            if (object.threadId != null)\n                message.threadId = object.threadId >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ContextSwitch message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof simpleperf_report_proto.ContextSwitch\n         * @static\n         * @param {simpleperf_report_proto.ContextSwitch} message ContextSwitch\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ContextSwitch.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.switchOn = false;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.time = options.longs === String ? \"0\" : 0;\n                object.threadId = 0;\n            }\n            if (message.switchOn != null && message.hasOwnProperty(\"switchOn\"))\n                object.switchOn = message.switchOn;\n            if (message.time != null && message.hasOwnProperty(\"time\"))\n                if (typeof message.time === \"number\")\n                    object.time = options.longs === String ? String(message.time) : message.time;\n                else\n                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber(true) : message.time;\n            if (message.threadId != null && message.hasOwnProperty(\"threadId\"))\n                object.threadId = message.threadId;\n            return object;\n        };\n\n        /**\n         * Converts this ContextSwitch to JSON.\n         * @function toJSON\n         * @memberof simpleperf_report_proto.ContextSwitch\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ContextSwitch.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ContextSwitch\n         * @function getTypeUrl\n         * @memberof simpleperf_report_proto.ContextSwitch\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ContextSwitch.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/simpleperf_report_proto.ContextSwitch\";\n        };\n\n        return ContextSwitch;\n    })();\n\n    simpleperf_report_proto.Record = (function() {\n\n        /**\n         * Properties of a Record.\n         * @memberof simpleperf_report_proto\n         * @interface IRecord\n         * @property {simpleperf_report_proto.ISample|null} [sample] Record sample\n         * @property {simpleperf_report_proto.ILostSituation|null} [lost] Record lost\n         * @property {simpleperf_report_proto.IFile|null} [file] Record file\n         * @property {simpleperf_report_proto.IThread|null} [thread] Record thread\n         * @property {simpleperf_report_proto.IMetaInfo|null} [metaInfo] Record metaInfo\n         * @property {simpleperf_report_proto.IContextSwitch|null} [contextSwitch] Record contextSwitch\n         */\n\n        /**\n         * Constructs a new Record.\n         * @memberof simpleperf_report_proto\n         * @classdesc Represents a Record.\n         * @implements IRecord\n         * @constructor\n         * @param {simpleperf_report_proto.IRecord=} [properties] Properties to set\n         */\n        function Record(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Record sample.\n         * @member {simpleperf_report_proto.ISample|null|undefined} sample\n         * @memberof simpleperf_report_proto.Record\n         * @instance\n         */\n        Record.prototype.sample = null;\n\n        /**\n         * Record lost.\n         * @member {simpleperf_report_proto.ILostSituation|null|undefined} lost\n         * @memberof simpleperf_report_proto.Record\n         * @instance\n         */\n        Record.prototype.lost = null;\n\n        /**\n         * Record file.\n         * @member {simpleperf_report_proto.IFile|null|undefined} file\n         * @memberof simpleperf_report_proto.Record\n         * @instance\n         */\n        Record.prototype.file = null;\n\n        /**\n         * Record thread.\n         * @member {simpleperf_report_proto.IThread|null|undefined} thread\n         * @memberof simpleperf_report_proto.Record\n         * @instance\n         */\n        Record.prototype.thread = null;\n\n        /**\n         * Record metaInfo.\n         * @member {simpleperf_report_proto.IMetaInfo|null|undefined} metaInfo\n         * @memberof simpleperf_report_proto.Record\n         * @instance\n         */\n        Record.prototype.metaInfo = null;\n\n        /**\n         * Record contextSwitch.\n         * @member {simpleperf_report_proto.IContextSwitch|null|undefined} contextSwitch\n         * @memberof simpleperf_report_proto.Record\n         * @instance\n         */\n        Record.prototype.contextSwitch = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * Record recordData.\n         * @member {\"sample\"|\"lost\"|\"file\"|\"thread\"|\"metaInfo\"|\"contextSwitch\"|undefined} recordData\n         * @memberof simpleperf_report_proto.Record\n         * @instance\n         */\n        Object.defineProperty(Record.prototype, \"recordData\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sample\", \"lost\", \"file\", \"thread\", \"metaInfo\", \"contextSwitch\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Record instance using the specified properties.\n         * @function create\n         * @memberof simpleperf_report_proto.Record\n         * @static\n         * @param {simpleperf_report_proto.IRecord=} [properties] Properties to set\n         * @returns {simpleperf_report_proto.Record} Record instance\n         */\n        Record.create = function create(properties) {\n            return new Record(properties);\n        };\n\n        /**\n         * Encodes the specified Record message. Does not implicitly {@link simpleperf_report_proto.Record.verify|verify} messages.\n         * @function encode\n         * @memberof simpleperf_report_proto.Record\n         * @static\n         * @param {simpleperf_report_proto.IRecord} message Record message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Record.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.sample != null && Object.hasOwnProperty.call(message, \"sample\"))\n                $root.simpleperf_report_proto.Sample.encode(message.sample, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.lost != null && Object.hasOwnProperty.call(message, \"lost\"))\n                $root.simpleperf_report_proto.LostSituation.encode(message.lost, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.file != null && Object.hasOwnProperty.call(message, \"file\"))\n                $root.simpleperf_report_proto.File.encode(message.file, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.thread != null && Object.hasOwnProperty.call(message, \"thread\"))\n                $root.simpleperf_report_proto.Thread.encode(message.thread, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.metaInfo != null && Object.hasOwnProperty.call(message, \"metaInfo\"))\n                $root.simpleperf_report_proto.MetaInfo.encode(message.metaInfo, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.contextSwitch != null && Object.hasOwnProperty.call(message, \"contextSwitch\"))\n                $root.simpleperf_report_proto.ContextSwitch.encode(message.contextSwitch, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Record message, length delimited. Does not implicitly {@link simpleperf_report_proto.Record.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof simpleperf_report_proto.Record\n         * @static\n         * @param {simpleperf_report_proto.IRecord} message Record message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Record.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Record message from the specified reader or buffer.\n         * @function decode\n         * @memberof simpleperf_report_proto.Record\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {simpleperf_report_proto.Record} Record\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Record.decode = function decode(reader, length, error) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.simpleperf_report_proto.Record();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                if (tag === error)\n                    break;\n                switch (tag >>> 3) {\n                case 1: {\n                        message.sample = $root.simpleperf_report_proto.Sample.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.lost = $root.simpleperf_report_proto.LostSituation.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.file = $root.simpleperf_report_proto.File.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.thread = $root.simpleperf_report_proto.Thread.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.metaInfo = $root.simpleperf_report_proto.MetaInfo.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.contextSwitch = $root.simpleperf_report_proto.ContextSwitch.decode(reader, reader.uint32());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Record message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof simpleperf_report_proto.Record\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {simpleperf_report_proto.Record} Record\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Record.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Record message.\n         * @function verify\n         * @memberof simpleperf_report_proto.Record\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Record.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.sample != null && message.hasOwnProperty(\"sample\")) {\n                properties.recordData = 1;\n                {\n                    var error = $root.simpleperf_report_proto.Sample.verify(message.sample);\n                    if (error)\n                        return \"sample.\" + error;\n                }\n            }\n            if (message.lost != null && message.hasOwnProperty(\"lost\")) {\n                if (properties.recordData === 1)\n                    return \"recordData: multiple values\";\n                properties.recordData = 1;\n                {\n                    var error = $root.simpleperf_report_proto.LostSituation.verify(message.lost);\n                    if (error)\n                        return \"lost.\" + error;\n                }\n            }\n            if (message.file != null && message.hasOwnProperty(\"file\")) {\n                if (properties.recordData === 1)\n                    return \"recordData: multiple values\";\n                properties.recordData = 1;\n                {\n                    var error = $root.simpleperf_report_proto.File.verify(message.file);\n                    if (error)\n                        return \"file.\" + error;\n                }\n            }\n            if (message.thread != null && message.hasOwnProperty(\"thread\")) {\n                if (properties.recordData === 1)\n                    return \"recordData: multiple values\";\n                properties.recordData = 1;\n                {\n                    var error = $root.simpleperf_report_proto.Thread.verify(message.thread);\n                    if (error)\n                        return \"thread.\" + error;\n                }\n            }\n            if (message.metaInfo != null && message.hasOwnProperty(\"metaInfo\")) {\n                if (properties.recordData === 1)\n                    return \"recordData: multiple values\";\n                properties.recordData = 1;\n                {\n                    var error = $root.simpleperf_report_proto.MetaInfo.verify(message.metaInfo);\n                    if (error)\n                        return \"metaInfo.\" + error;\n                }\n            }\n            if (message.contextSwitch != null && message.hasOwnProperty(\"contextSwitch\")) {\n                if (properties.recordData === 1)\n                    return \"recordData: multiple values\";\n                properties.recordData = 1;\n                {\n                    var error = $root.simpleperf_report_proto.ContextSwitch.verify(message.contextSwitch);\n                    if (error)\n                        return \"contextSwitch.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Record message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof simpleperf_report_proto.Record\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {simpleperf_report_proto.Record} Record\n         */\n        Record.fromObject = function fromObject(object) {\n            if (object instanceof $root.simpleperf_report_proto.Record)\n                return object;\n            var message = new $root.simpleperf_report_proto.Record();\n            if (object.sample != null) {\n                if (typeof object.sample !== \"object\")\n                    throw TypeError(\".simpleperf_report_proto.Record.sample: object expected\");\n                message.sample = $root.simpleperf_report_proto.Sample.fromObject(object.sample);\n            }\n            if (object.lost != null) {\n                if (typeof object.lost !== \"object\")\n                    throw TypeError(\".simpleperf_report_proto.Record.lost: object expected\");\n                message.lost = $root.simpleperf_report_proto.LostSituation.fromObject(object.lost);\n            }\n            if (object.file != null) {\n                if (typeof object.file !== \"object\")\n                    throw TypeError(\".simpleperf_report_proto.Record.file: object expected\");\n                message.file = $root.simpleperf_report_proto.File.fromObject(object.file);\n            }\n            if (object.thread != null) {\n                if (typeof object.thread !== \"object\")\n                    throw TypeError(\".simpleperf_report_proto.Record.thread: object expected\");\n                message.thread = $root.simpleperf_report_proto.Thread.fromObject(object.thread);\n            }\n            if (object.metaInfo != null) {\n                if (typeof object.metaInfo !== \"object\")\n                    throw TypeError(\".simpleperf_report_proto.Record.metaInfo: object expected\");\n                message.metaInfo = $root.simpleperf_report_proto.MetaInfo.fromObject(object.metaInfo);\n            }\n            if (object.contextSwitch != null) {\n                if (typeof object.contextSwitch !== \"object\")\n                    throw TypeError(\".simpleperf_report_proto.Record.contextSwitch: object expected\");\n                message.contextSwitch = $root.simpleperf_report_proto.ContextSwitch.fromObject(object.contextSwitch);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Record message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof simpleperf_report_proto.Record\n         * @static\n         * @param {simpleperf_report_proto.Record} message Record\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Record.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.sample != null && message.hasOwnProperty(\"sample\")) {\n                object.sample = $root.simpleperf_report_proto.Sample.toObject(message.sample, options);\n                if (options.oneofs)\n                    object.recordData = \"sample\";\n            }\n            if (message.lost != null && message.hasOwnProperty(\"lost\")) {\n                object.lost = $root.simpleperf_report_proto.LostSituation.toObject(message.lost, options);\n                if (options.oneofs)\n                    object.recordData = \"lost\";\n            }\n            if (message.file != null && message.hasOwnProperty(\"file\")) {\n                object.file = $root.simpleperf_report_proto.File.toObject(message.file, options);\n                if (options.oneofs)\n                    object.recordData = \"file\";\n            }\n            if (message.thread != null && message.hasOwnProperty(\"thread\")) {\n                object.thread = $root.simpleperf_report_proto.Thread.toObject(message.thread, options);\n                if (options.oneofs)\n                    object.recordData = \"thread\";\n            }\n            if (message.metaInfo != null && message.hasOwnProperty(\"metaInfo\")) {\n                object.metaInfo = $root.simpleperf_report_proto.MetaInfo.toObject(message.metaInfo, options);\n                if (options.oneofs)\n                    object.recordData = \"metaInfo\";\n            }\n            if (message.contextSwitch != null && message.hasOwnProperty(\"contextSwitch\")) {\n                object.contextSwitch = $root.simpleperf_report_proto.ContextSwitch.toObject(message.contextSwitch, options);\n                if (options.oneofs)\n                    object.recordData = \"contextSwitch\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Record to JSON.\n         * @function toJSON\n         * @memberof simpleperf_report_proto.Record\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Record.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Record\n         * @function getTypeUrl\n         * @memberof simpleperf_report_proto.Record\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Record.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/simpleperf_report_proto.Record\";\n        };\n\n        return Record;\n    })();\n\n    return simpleperf_report_proto;\n})();\n\nmodule.exports = $root;\n","import { simpleperf_report_proto as report } from './proto/simpleperf_report';\n\nimport { PROCESSED_PROFILE_VERSION } from 'firefox-profiler/app-logic/constants';\nimport type { Milliseconds } from 'firefox-profiler/types/units';\nimport type {\n  CategoryList,\n  CategoryColor,\n  FrameTable,\n  FuncTable,\n  IndexIntoCategoryList,\n  IndexIntoFrameTable,\n  IndexIntoFuncTable,\n  IndexIntoResourceTable,\n  IndexIntoStackTable,\n  ProfileMeta,\n  ResourceTable,\n  RawSamplesTable,\n  Profile,\n  RawThread,\n  RawStackTable,\n} from 'firefox-profiler/types/profile';\nimport {\n  getEmptyFuncTable,\n  getEmptyResourceTable,\n  getEmptyFrameTable,\n  getEmptyRawStackTable,\n  getEmptySamplesTable,\n  getEmptyRawMarkerTable,\n  getEmptyNativeSymbolTable,\n  getEmptySourceTable,\n} from 'firefox-profiler/profile-logic/data-structures';\nimport { StringTable } from 'firefox-profiler/utils/string-table';\nimport { ensureExists } from 'firefox-profiler/utils/types';\nimport {\n  verifyMagic,\n  SIMPLEPERF as SIMPLEPERF_MAGIC,\n} from 'firefox-profiler/utils/magic';\n\nimport Long from 'long';\n\nfunction toNumber(value: Long | number): number {\n  if (Long.isLong(value)) {\n    const longValue: Long = value;\n    return longValue.toNumber();\n  }\n\n  return value;\n}\n\nfunction toMilliseconds(nanoseconds: number | Long): Milliseconds {\n  return toNumber(nanoseconds) / 1000_000;\n}\n\nclass Categories {\n  static categoryList: CategoryList = [];\n\n  static Other = this.createCategory('Other', 'grey');\n  static Native = this.createCategory('Native', 'magenta');\n  static Java = this.createCategory('Java', 'green');\n  static System = this.createCategory('System', 'yellow');\n  static Kernel = this.createCategory('Kernel', 'orange');\n\n  static toJson(): CategoryList {\n    return this.categoryList;\n  }\n\n  static createCategory(\n    name: string,\n    color: CategoryColor\n  ): IndexIntoCategoryList {\n    const index = this.categoryList.length;\n    this.categoryList.push({ name, color, subcategories: ['Other'] });\n\n    return index;\n  }\n}\n\nclass FirefoxResourceTable {\n  strings: StringTable;\n\n  resourceTable: ResourceTable = getEmptyResourceTable();\n  resourcesMap: Map<number, IndexIntoResourceTable> = new Map();\n\n  constructor(strings: StringTable) {\n    this.strings = strings;\n  }\n\n  toJson(): ResourceTable {\n    return this.resourceTable;\n  }\n\n  findOrAddResource(file: report.IFile): IndexIntoResourceTable {\n    let resourceIndex = this.resourcesMap.get(file.id!);\n    if (!resourceIndex) {\n      this.resourceTable.lib.push(null);\n      this.resourceTable.name.push(this.strings.indexForString(file.path!));\n      this.resourceTable.host.push(null);\n      this.resourceTable.type.push(1); // Library\n\n      resourceIndex = this.resourceTable.length++;\n      this.resourcesMap.set(file.id!, resourceIndex);\n    }\n\n    return resourceIndex;\n  }\n}\n\nclass FirefoxFuncTable {\n  strings: StringTable;\n\n  funcTable: FuncTable = getEmptyFuncTable();\n  funcMap: Map<string, IndexIntoFuncTable> = new Map();\n\n  constructor(strings: StringTable) {\n    this.strings = strings;\n  }\n\n  toJson(): FuncTable {\n    return this.funcTable;\n  }\n\n  findOrAddFunc(name: string, resourceIndex: number): IndexIntoFuncTable {\n    const nameIndex = this.strings.indexForString(name);\n\n    const mapKey = `${nameIndex}-${resourceIndex}`;\n\n    let funcIndex = this.funcMap.get(mapKey);\n    if (!funcIndex) {\n      this.funcTable.name.push(nameIndex);\n      this.funcTable.isJS.push(false);\n      this.funcTable.relevantForJS.push(false);\n      this.funcTable.resource.push(resourceIndex);\n      this.funcTable.source.push(null);\n      this.funcTable.lineNumber.push(null);\n      this.funcTable.columnNumber.push(null);\n\n      funcIndex = this.funcTable.length++;\n      this.funcMap.set(mapKey, funcIndex);\n    }\n\n    return funcIndex;\n  }\n}\n\nclass FirefoxFrameTable {\n  strings: StringTable;\n\n  frameTable: FrameTable = getEmptyFrameTable();\n  frameMap: Map<string, IndexIntoFrameTable> = new Map();\n\n  constructor(strings: StringTable) {\n    this.strings = strings;\n  }\n\n  toJson(): FrameTable {\n    return this.frameTable;\n  }\n\n  findOrAddFrame(\n    funcIndex: IndexIntoFuncTable,\n    category: IndexIntoCategoryList\n  ): IndexIntoFrameTable {\n    const mapKey = `${funcIndex}-${category}`;\n\n    let frameIndex = this.frameMap.get(mapKey);\n    if (!frameIndex) {\n      this.frameTable.address.push(-1);\n      this.frameTable.inlineDepth.push(0);\n      this.frameTable.category.push(category);\n      this.frameTable.subcategory.push(0);\n      this.frameTable.func.push(funcIndex);\n      this.frameTable.nativeSymbol.push(null);\n      this.frameTable.innerWindowID.push(null);\n      this.frameTable.line.push(null);\n      this.frameTable.column.push(null);\n\n      frameIndex = this.frameTable.length++;\n      this.frameMap.set(mapKey, frameIndex);\n    }\n\n    return frameIndex;\n  }\n}\n\nclass FirefoxSampleTable {\n  strings: StringTable;\n\n  stackTable: RawStackTable = getEmptyRawStackTable();\n  stackMap: Map<string, IndexIntoStackTable> = new Map();\n\n  constructor(strings: StringTable) {\n    this.strings = strings;\n  }\n\n  toJson(): RawStackTable {\n    return this.stackTable;\n  }\n\n  findOrAddStack(\n    frameIndex: IndexIntoFrameTable,\n    prefix: IndexIntoStackTable | null\n  ): IndexIntoStackTable {\n    const mapKey = `${frameIndex}-${prefix ?? 'null'}`;\n\n    let stackIndex = this.stackMap.get(mapKey);\n    if (!stackIndex) {\n      this.stackTable.frame.push(frameIndex);\n      this.stackTable.prefix.push(prefix);\n\n      stackIndex = this.stackTable.length++;\n      this.stackMap.set(mapKey, stackIndex);\n    }\n\n    return stackIndex;\n  }\n}\n\nclass FirefoxThread {\n  name: string;\n  isMainThread: boolean;\n\n  tid: number;\n  pid: number;\n\n  strings: StringTable;\n\n  sampleTable: RawSamplesTable = getEmptySamplesTable();\n\n  stackTable: FirefoxSampleTable;\n  frameTable: FirefoxFrameTable;\n  funcTable: FirefoxFuncTable;\n  resourceTable: FirefoxResourceTable;\n\n  cpuClockEventId: number = -1;\n\n  constructor(thread: report.IThread, stringTable: StringTable) {\n    this.tid = thread.threadId!;\n    this.pid = thread.processId!;\n\n    this.isMainThread = thread.threadId === thread.processId;\n    this.name = thread.threadName ?? '';\n\n    this.strings = stringTable;\n\n    this.stackTable = new FirefoxSampleTable(this.strings);\n    this.frameTable = new FirefoxFrameTable(this.strings);\n    this.funcTable = new FirefoxFuncTable(this.strings);\n    this.resourceTable = new FirefoxResourceTable(this.strings);\n  }\n\n  toJson(): RawThread {\n    return {\n      processType: 'default',\n      processStartupTime: 0,\n      processShutdownTime: null,\n      registerTime: 0,\n      unregisterTime: null,\n      pausedRanges: [],\n      name: this.name,\n      isMainThread: this.isMainThread,\n      pid: this.pid.toString(),\n      tid: this.tid,\n      samples: this.sampleTable,\n      markers: getEmptyRawMarkerTable(),\n      stackTable: this.stackTable.toJson(),\n      frameTable: this.frameTable.toJson(),\n      funcTable: this.funcTable.toJson(),\n      resourceTable: this.resourceTable.toJson(),\n      nativeSymbols: getEmptyNativeSymbolTable(),\n    };\n  }\n\n  enableCpuClock(cpuClockEventId: number): void {\n    this.cpuClockEventId = cpuClockEventId;\n\n    if (cpuClockEventId >= 0) {\n      this.sampleTable.weight = [];\n      this.sampleTable.weightType = 'tracing-ms';\n    }\n  }\n\n  addSample(sample: report.ISample, fileMap: Map<number, report.IFile>): void {\n    let prefixStackId: number | null = null;\n    for (const frame of sample.callchain!.reverse()) {\n      const file: report.IFile = fileMap.get(frame.fileId!)!;\n\n      const resourceIndex = this.resourceTable.findOrAddResource(file);\n      const methodName =\n        frame.symbolId! >= 0\n          ? file.symbol![frame.symbolId!]\n          : `${file.path!.split(/[\\\\/]/).pop()}+0x${frame.vaddrInFile!.toString(16)}`;\n\n      const funcIndex = this.funcTable.findOrAddFunc(methodName, resourceIndex);\n\n      const filePath = file.path ?? '';\n      // const fileInAppData = filePath.startsWith(\"/data/app/\");\n      const fileInSystem =\n        filePath.startsWith('/apex/') ||\n        filePath.startsWith('/system/') ||\n        filePath.startsWith('/vendor/');\n\n      let category: IndexIntoCategoryList = Categories.Other;\n      if (filePath === '[kernel.kallsyms]' || filePath.endsWith('.ko')) {\n        category = Categories.Kernel;\n      } else if (filePath.endsWith('.so')) {\n        category = fileInSystem ? Categories.System : Categories.Native;\n      } else if (\n        filePath === '[JIT app cache]' ||\n        filePath.endsWith('.vdex') ||\n        filePath.endsWith('.apk') ||\n        filePath.endsWith('.jar') ||\n        filePath.endsWith('.oat') ||\n        filePath.endsWith('.odex')\n      ) {\n        const isJavaMethod =\n          methodName.startsWith('java.') ||\n          methodName.startsWith('javax.') ||\n          methodName.startsWith('kotlin.') ||\n          methodName.startsWith('kotlinx.') ||\n          methodName.startsWith('dalvik.');\n        const isAndroidMethod =\n          methodName.startsWith('android.') ||\n          methodName.startsWith('com.android.') ||\n          methodName.startsWith('androidx.') ||\n          methodName.startsWith('libcore.');\n        category =\n          fileInSystem || isAndroidMethod || isJavaMethod\n            ? Categories.System\n            : Categories.Java;\n      }\n\n      const frameIndex = this.frameTable.findOrAddFrame(funcIndex, category);\n\n      prefixStackId = this.stackTable.findOrAddStack(frameIndex, prefixStackId);\n    }\n\n    this.sampleTable.stack.push(prefixStackId);\n    ensureExists(this.sampleTable.time).push(toMilliseconds(sample.time ?? 0));\n\n    if (this.sampleTable.weight) {\n      const weight =\n        this.cpuClockEventId >= 0 && sample.eventTypeId === this.cpuClockEventId\n          ? toMilliseconds(sample.eventCount ?? 0)\n          : 0;\n      this.sampleTable.weight.push(weight);\n    }\n\n    this.sampleTable.length++;\n  }\n}\n\nclass FirefoxProfile {\n  threads: FirefoxThread[] = [];\n  threadMap: Map<number, FirefoxThread> = new Map();\n\n  fileMap: Map<number, report.IFile> = new Map();\n\n  eventTypes: string[] = [];\n  cpuClockEventId: number = -1;\n\n  appPackageName: string | null = null;\n  sampleCount: number = 0;\n  lostCount: number = 0;\n\n  stringArray = [];\n  stringTable = StringTable.withBackingArray(this.stringArray);\n\n  toJson(): Profile {\n    return {\n      meta: this.getProfileMeta(),\n      libs: [],\n      shared: {\n        stringArray: this.stringArray,\n        sources: getEmptySourceTable(),\n      },\n      threads: this.threads.map((thread) => thread.toJson()),\n    };\n  }\n\n  getProfileMeta(): ProfileMeta {\n    return {\n      // The interval at which the threads are sampled.\n      interval: 0,\n      startTime: 0,\n      processType: 0,\n      categories: Categories.toJson(),\n      product: this.appPackageName ?? 'Android Profile',\n      stackwalk: 0,\n      // This is the Gecko profile format version (the unprocessed version received directly\n      // from the browser.)\n      version: 30,\n      // This is the processed profile format version.\n      preprocessedProfileVersion: PROCESSED_PROFILE_VERSION,\n\n      symbolicationNotSupported: true,\n      markerSchema: [],\n\n      platform: 'Android',\n      toolkit: 'android',\n      importedFrom: 'Simpleperf',\n\n      // Do not distinguish between different stack types?\n      usesOnlyOneStackType: true,\n      // Hide the \"Look up the function name on Searchfox\" menu entry?\n      sourceCodeIsNotOnSearchfox: true,\n      // Extra information about the profile, not shown in the \"Profile Info\" panel,\n      // but in the more info panel\n      extra: [\n        {\n          label: 'Profile Information',\n          entries: [\n            {\n              label: 'Sample Count',\n              format: 'integer',\n              value: this.sampleCount,\n            },\n            {\n              label: 'Lost Samples',\n              format: 'integer',\n              value: this.lostCount,\n            },\n            {\n              label: 'Sampled events',\n              format: 'list',\n              value: this.eventTypes,\n            },\n          ],\n        },\n      ],\n      // Keep the defined thread order\n      keepProfileThreadOrder: true,\n    };\n  }\n\n  setMetaInfo(metaInfo: report.IMetaInfo | null) {\n    this.eventTypes = metaInfo?.eventType ?? [];\n    this.appPackageName = metaInfo?.appPackageName ?? null;\n\n    this.cpuClockEventId =\n      (this.eventTypes && this.eventTypes.indexOf('cpu-clock')) ?? -1;\n  }\n\n  setLostSituation(lost: report.ILostSituation | null) {\n    this.sampleCount = toNumber(lost?.sampleCount ?? 0);\n    this.lostCount = toNumber(lost?.lostCount ?? 0);\n  }\n\n  addFile(file: report.IFile) {\n    this.fileMap.set(file.id!, file);\n  }\n\n  addThread(thread: report.IThread) {\n    const firefoxThread = new FirefoxThread(thread, this.stringTable);\n    this.threads.push(firefoxThread);\n    this.threadMap.set(thread.threadId!, firefoxThread);\n  }\n\n  finalizeThreads() {\n    this.threads.forEach((thread) => {\n      thread.enableCpuClock(this.cpuClockEventId ?? -1);\n    });\n  }\n\n  addSample(sample: report.ISample): void {\n    const thread = this.threadMap.get(sample.threadId!);\n\n    if (!thread) {\n      console.warn(`Thread not found for sample: ${sample.threadId}`);\n      return;\n    }\n\n    thread.addSample(sample, this.fileMap);\n  }\n}\n\nexport class SimpleperfReportConverter {\n  buffer: ArrayBufferLike;\n  bufferView: DataView;\n  bufferOffset: number = 0;\n\n  constructor(buffer: ArrayBufferLike) {\n    this.buffer = buffer;\n    this.bufferView = new DataView(buffer);\n  }\n\n  readUint16LE() {\n    const value = this.bufferView.getUint16(\n      this.bufferOffset,\n      true /* littleEndian */\n    );\n    this.bufferOffset += 2;\n    return value;\n  }\n\n  readUint32LE() {\n    const value = this.bufferView.getUint32(\n      this.bufferOffset,\n      true /* littleEndian */\n    );\n    this.bufferOffset += 4;\n    return value;\n  }\n\n  readMagic() {\n    if (!verifyMagic(SIMPLEPERF_MAGIC, this.buffer)) {\n      throw new Error('Invalid simpleperf file');\n    }\n    this.bufferOffset += SIMPLEPERF_MAGIC.length;\n  }\n\n  readRecord(recordSize: number): report.Record {\n    const recordBuffer = this.buffer.slice(\n      this.bufferOffset,\n      this.bufferOffset + recordSize\n    );\n    const recordArray = new Uint8Array(recordBuffer);\n    this.bufferOffset += recordSize;\n\n    return report.Record.decode(recordArray);\n  }\n\n  process(): Profile {\n    this.readMagic();\n\n    // Parse version\n    this.readUint16LE();\n\n    let recordSize = this.readUint32LE();\n\n    const targetProfile = new FirefoxProfile();\n\n    const samples: report.ISample[] = [];\n    let sampleCount = 0;\n\n    while (recordSize > 0) {\n      const record: report.Record = this.readRecord(recordSize);\n\n      switch (record.recordData) {\n        case 'sample':\n          samples.push(record.sample!);\n          break;\n        case 'lost':\n          // Expected only once\n          sampleCount = toNumber(record.lost?.sampleCount ?? 0);\n          targetProfile.setLostSituation(record.lost!);\n          break;\n        case 'file':\n          targetProfile.addFile(record.file!);\n          break;\n        case 'thread':\n          targetProfile.addThread(record.thread!);\n          break;\n        case 'metaInfo':\n          // Expected only once\n          targetProfile.setMetaInfo(record.metaInfo!);\n          break;\n        case 'contextSwitch':\n          // Not handled\n          break;\n        default:\n          console.warn(`Unknown record type: ${record.recordData}`);\n          break;\n      }\n\n      recordSize = this.readUint32LE();\n    }\n\n    if (samples.length !== sampleCount) {\n      throw new Error(\"Samples count doesn't match the number of samples read\");\n    }\n\n    targetProfile.finalizeThreads();\n    samples.forEach((sample) => targetProfile.addSample(sample));\n\n    return targetProfile.toJson();\n  }\n}\n\nexport function convertSimpleperfTraceProfile(\n  traceBuffer: ArrayBufferLike\n): Profile {\n  return new SimpleperfReportConverter(traceBuffer).process();\n}\n"],"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","simpleperf_report_proto","Sample","properties","callchain","keys","Object","i","length","prototype","time","Long","fromBits","threadId","emptyArray","eventCount","eventTypeId","unwindingResult","create","encode","message","writer","hasOwnProperty","call","uint32","uint64","int32","CallChainEntry","fork","ldelim","UnwindingResult","encodeDelimited","decode","reader","error","end","undefined","len","pos","tag","push","skipType","decodeDelimited","verify","isInteger","low","high","Array","isArray","fromObject","object","fromValue","unsigned","parseInt","LongBits","toNumber","TypeError","toObject","options","arrays","defaults","long","longs","String","toString","Number","j","toJSON","constructor","toJSONOptions","getTypeUrl","typeUrlPrefix","vaddrInFile","fileId","symbolId","executionType","enums","ExecutionType","valuesById","values","rawErrorCode","errorAddr","errorCode","ErrorCode","LostSituation","sampleCount","lostCount","File","symbol","mangledSymbol","id","path","string","isString","Thread","processId","threadName","MetaInfo","eventType","appPackageName","appType","androidSdkVersion","androidBuildType","traceOffcpu","bool","Boolean","ContextSwitch","switchOn","Record","sample","lost","file","thread","metaInfo","contextSwitch","$oneOfFields","defineProperty","get","oneOfGetter","set","oneOfSetter","recordData","oneofs","module","exports","report","PROCESSED_PROFILE_VERSION","getEmptyFuncTable","getEmptyResourceTable","getEmptyFrameTable","getEmptyRawStackTable","getEmptySamplesTable","getEmptyRawMarkerTable","getEmptyNativeSymbolTable","getEmptySourceTable","StringTable","ensureExists","verifyMagic","SIMPLEPERF","SIMPLEPERF_MAGIC","value","isLong","longValue","toMilliseconds","nanoseconds","Categories","toJson","categoryList","createCategory","name","color","index","subcategories","_Categories","Other","Native","Java","System","Kernel","FirefoxResourceTable","strings","resourceTable","resourcesMap","Map","findOrAddResource","resourceIndex","lib","indexForString","host","type","FirefoxFuncTable","funcTable","funcMap","findOrAddFunc","nameIndex","mapKey","funcIndex","isJS","relevantForJS","resource","source","lineNumber","columnNumber","FirefoxFrameTable","frameTable","frameMap","findOrAddFrame","category","frameIndex","address","inlineDepth","subcategory","func","nativeSymbol","innerWindowID","line","column","FirefoxSampleTable","stackTable","stackMap","findOrAddStack","prefix","stackIndex","frame","FirefoxThread","stringTable","isMainThread","tid","pid","sampleTable","cpuClockEventId","processType","processStartupTime","processShutdownTime","registerTime","unregisterTime","pausedRanges","samples","markers","nativeSymbols","enableCpuClock","weight","weightType","addSample","fileMap","prefixStackId","reverse","methodName","split","pop","filePath","fileInSystem","startsWith","endsWith","isJavaMethod","isAndroidMethod","stack","FirefoxProfile","threads","threadMap","eventTypes","stringArray","withBackingArray","meta","getProfileMeta","libs","shared","sources","map","interval","startTime","categories","product","stackwalk","version","preprocessedProfileVersion","symbolicationNotSupported","markerSchema","platform","toolkit","importedFrom","usesOnlyOneStackType","sourceCodeIsNotOnSearchfox","extra","label","entries","format","keepProfileThreadOrder","setMetaInfo","indexOf","setLostSituation","addFile","addThread","firefoxThread","finalizeThreads","forEach","console","warn","SimpleperfReportConverter","buffer","bufferView","bufferOffset","DataView","readUint16LE","getUint16","readUint32LE","getUint32","readMagic","Error","readRecord","recordSize","recordBuffer","slice","recordArray","Uint8Array","process","targetProfile","record","convertSimpleperfTraceProfile","traceBuffer"],"sourceRoot":""}